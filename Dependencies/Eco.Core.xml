<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Eco.Core</name>
    </assembly>
    <members>
        <member name="M:Eco.Core.AWS.S3Storage.DeleteAsync(Amazon.S3.IAmazonS3,System.String,System.String)">
            <summary>
            Deletes all the files in this directory as well as this directory.  If recursive is set to true then all sub directories will be
            deleted as well.
            </summary>
        </member>
        <member name="M:Eco.Core.Backup.BackupPlugin.GetBackupStoragesAsync(System.String)">
            <summary>Returns all backup storages ordered by chronological order.</summary>
        </member>
        <member name="M:Eco.Core.Backup.BackupPlugin.RestoreMostRecentBackupAsync(System.String,System.Func{System.String,System.Boolean})">
            <summary>Restores most recent backup for <paramref name="gameName"/>. It starts with head backup and then continues with every backup in reverse chronological
            order using <paramref name="checkBackup"/> for backup validation. If the check function not provided then just returns first backup.
            It copies backup to Storage directory before each call to the check function.</summary>
        </member>
        <member name="M:Eco.Core.Backup.BackupPlugin.ShutdownAsync">
            <summary>
            Need to make head backup just before server shutdown, it will guarantee we will be able to start from the same place.
            </summary>
        </member>
        <member name="M:Eco.Core.Backup.BackupPlugin.Run">
            <summary>
            Starts backups, we don't want to do make it in constructor or Initialize section because in case of long start-up we don't want to have backups during this phase.
            </summary>
        </member>
        <member name="T:Eco.Core.Collections.UniquePriorityQueue`2">
            <summary> Thread-unsafe Unique Priority Queue implementation. It only allows to put non-null unique elements. </summary>
        </member>
        <member name="M:Eco.Core.Collections.UniquePriorityQueue`2.EnqueueUnique(`0,`1)">
            <summary> Enqueues new item with given priority. Item ignored if already present in queue and method returns false in this case. </summary>
        </member>
        <member name="M:Eco.Core.Collections.UniquePriorityQueue`2.TryDequeue(`0@,`1@)">
            <summary> Tries to dequeue item from the queue (if any). Returns <c>true</c> and item with it's priority as output parameters. <c>false</c> otherwise. </summary>
        </member>
        <member name="M:Eco.Core.Collections.UniquePriorityQueue`2.Clear">
            <summary> Clears whole queue. </summary>
        </member>
        <member name="T:Eco.Core.Controller.AutoGenClassBuilder">
            <summary> Helper class for <see cref="T:Eco.Core.Controller.ViewCodeGenerator"/> which responsible for building View class code. </summary>
        </member>
        <member name="M:Eco.Core.Controller.AutoGenClassBuilder.BeginDataClass">
            <summary> Begins backing Data class generation. </summary>
        </member>
        <member name="M:Eco.Core.Controller.AutoGenClassBuilder.EndDataClass">
            <summary> Ends backing Data class generation. </summary>
        </member>
        <member name="M:Eco.Core.Controller.AutoGenClassBuilder.BeginClass">
            <summary> Begins View class generation. </summary>
        </member>
        <member name="M:Eco.Core.Controller.AutoGenClassBuilder.BeginPropertiesSection">
            <summary> Begins properties section. </summary>
        </member>
        <member name="M:Eco.Core.Controller.AutoGenClassBuilder.BeginMethodPropertiesSection">
            <summary> Begins properties section which generated from methods. </summary>
        </member>
        <member name="M:Eco.Core.Controller.AutoGenClassBuilder.BeginRPCSection">
            <summary> Begins RPC section. </summary>
        </member>
        <member name="M:Eco.Core.Controller.AutoGenClassBuilder.AppendProperty(System.Type,System.String,System.String,Eco.Shared.View.SyncFlags,System.String)">
            <summary> Appends code for property. </summary>
        </member>
        <member name="M:Eco.Core.Controller.AutoGenClassBuilder.AppendRPC(Eco.Shared.Networking.RPCMethod)">
            <summary> Appends code for RPC. </summary>
        </member>
        <member name="M:Eco.Core.Controller.AutoGenClassBuilder.EndClass">
            <summary> Finishes class generation and adds class prolog. </summary>
        </member>
        <member name="M:Eco.Core.Controller.AutoGenClassBuilder.AppendRecoveryMethod">
            <summary> Appends Recovery method if any recovery property assignments was added. </summary>
        </member>
        <member name="M:Eco.Core.Controller.CoreAttributeExtensions.IsSerializedTypeName(System.Reflection.MemberInfo)">
            <summary>Checks if <see cref                                ="T:System.Type"/> may be referenced in serialized data, but may not be serialized itself. Any <see cref="M:Eco.Core.Controller.CoreAttributeExtensions.IsSerialized(System.Reflection.MemberInfo)"/> type is also <see cref="M:Eco.Core.Controller.CoreAttributeExtensions.IsSerializedTypeName(System.Reflection.MemberInfo)"/>, but not all <see cref="M:Eco.Core.Controller.CoreAttributeExtensions.IsSerializedTypeName(System.Reflection.MemberInfo)"/> types are <see cref="M:Eco.Core.Controller.CoreAttributeExtensions.IsSerialized(System.Reflection.MemberInfo)"/>.</summary>
        </member>
        <member name="T:Eco.Core.Controller.ViewClassAttribute">
            <summary>Flags on view classes.</summary>
        </member>
        <member name="T:Eco.Core.Controller.AutogenClassAttribute">
            <summary> A class that has its view autogennerated.  Applying this attribute will prevent it from generating a view class in the view autogen file.</summary>
        </member>
        <member name="T:Eco.Core.Controller.HasIconAttribute">
            <summary> This class has an icon to represent it on the client. </summary>
        </member>
        <member name="T:Eco.Core.Controller.NoIconAttribute">
            <summary> If a parent has HasIcon and we want to override and block that, apply this tag. </summary>
        </member>
        <member name="T:Eco.Core.Controller.CreateComponentTab">
            <summary>For WorldObjectComponents, ensures that a tab is created in the UI for it. The client looks for a property named ComponentTabName to determine the name. If not available then it will use class DisplayName. </summary>
        </member>
        <member name="T:Eco.Core.Controller.ForceCreateViewAttribute">
            <summary> Tag for the view system to create a view even if there are no synctoview properties in the class.</summary>
        </member>
        <member name="T:Eco.Core.Controller.ForceCreateViewAllDerivedAttribute">
            <summary> Tag for the view system to create a view even if there are no synctoview properties in the class, affects all derived classes too. </summary>
        </member>
        <member name="T:Eco.Core.Controller.NegatedNameAttribute">
            <summary> For boolean properties that serve as context, this will be the negated name that we also add to context (so the bool 'Bought' can have a negated context name 'Sold' that is shown to the player). </summary>
        </member>
        <member name="T:Eco.Core.Controller.ViewMemberAttribute">
            <summary>
            Flags on members of synced classes that can inform the client about how the member can be displayed and used. 
            </summary>
        </member>
        <member name="T:Eco.Core.Controller.ViewSelectorAttribute">
            <summary> Additional set of flags since <see cref="T:Eco.Core.Controller.ViewMemberAttribute"/> doesn't have much free space. </summary>
        </member>
        <member name="T:Eco.Core.Controller.ShowFullObjectAttribute">
            <summary> Apply this when you want to not display the reference selector, and just show the contents itself. </summary>
        </member>
        <member name="T:Eco.Core.Controller.ClientInterfacePropertyAttribute">
            <summary> Specially tag interface members that should be created on the client. We cant mark them 
            synctoview because the view system doesn't handle inherited properties well.</summary>
        </member>
        <member name="T:Eco.Core.Controller.DontCloneAttribute">
            <summary> Tag properties that should not be cloned. </summary>
        </member>
        <member name="T:Eco.Core.Controller.UITypeNameAttribute">
            <summary> Override the UI that is used to autogenerate this view. </summary>
        </member>
        <member name="T:Eco.Core.Controller.UIListTypeNameAttribute">
            <summary> Override the UI that is used to autogenerate the list that contains this view. </summary>
        </member>
        <member name="T:Eco.Core.Controller.DynamicTitleAttribute">
            <summary> Override the UI that is used to autogenerate the list that contains this view. Define a parameter that we query to get the name of this element. </summary>
        </member>
        <member name="T:Eco.Core.Controller.RequiredTagAttribute">
            <summary> Only allow selection of this parameter among things with this tag. </summary>
        </member>
        <member name="T:Eco.Core.Controller.VisibilityParamAttribute">
            <summary> Specifies the name of another property on this same object that determines the bool visbility state of this property. </summary>
        </member>
        <member name="T:Eco.Core.Controller.AutogenAttribute">
            <summary> Can pass in the name of the UI that will be used on the client, if you want to override the default.</summary>
        </member>
        <member name="M:Eco.Core.Controller.ViewCodeGenerator.GenerateViewProperties(System.Text.StringBuilder,System.Collections.Generic.IEnumerable{Eco.Shared.View.ViewMemberInfo},Eco.Core.Controller.ControllerMarshalerService)">
            <summary>Generates view properties for SyncToView properties and methods from <paramref name="members"/>.</summary>
        </member>
        <member name="T:Eco.Core.Controller.ControllerManager">
            <summary>Manages all controllers on server-side. Controllers are server objects which has view on the client.</summary>
            <remarks>For debugging purposes you may run build with /p:DefineConstants=LOG_VIEW_SYSTEM or you can enable it in .csproj file. In this mode it will produce ViewData-{date}.txt file with sorted view data in stable order.</remarks>
        </member>
        <member name="M:Eco.Core.Controller.ControllerManager.SubscribeController(Eco.Core.Controller.IController,Eco.Shared.View.ISubscriptions,System.String,System.Action)">
            <summary>Subscribes to controller and registers subscription in <paramref name="subscriptions"/>.</summary>
        </member>
        <member name="M:Eco.Core.Controller.ControllerManager.SubscribeControllerAndCall(Eco.Core.Controller.IController,Eco.Shared.View.ISubscriptions,System.String,System.Action)">
            <summary>Subscribes to controller, registers subscription in <paramref name="subscriptions"/> and calls <paramref name="changedCallback"/>.</summary>
        </member>
        <member name="M:Eco.Core.Controller.ControllerManager.SubscribeControllerUnique(Eco.Core.Controller.IController,Eco.Shared.View.ISubscriptions,System.String,System.Action)">
            <summary>Subscribes to controller (unique) and registers subscription in <paramref name="subscriptions"/>.</summary>
        </member>
        <member name="M:Eco.Core.Controller.ControllerManager.SubscribeControllerUniqueAndCall(Eco.Core.Controller.IController,Eco.Shared.View.ISubscriptions,System.String,System.Action)">
            <summary>Subscribes to controller, registers subscription in <paramref name="subscriptions"/> and calls <paramref name="changedCallback"/>.</summary>
        </member>
        <member name="M:Eco.Core.Controller.ControllerManager.SubscribeController(Eco.Core.Controller.IController,System.String,System.Action,System.Boolean)">
            <summary>Subscribe on property <paramref name="propName"/> changes for the <paramref name="controller"/>.</summary>
        </member>
        <member name="M:Eco.Core.Controller.ControllerManager.GetOrCreateControllerInstanceInfo(Eco.Core.Controller.IController)">
            <summary>Get or create the controller instance info for the given controller</summary>
        </member>
        <member name="M:Eco.Core.Controller.ControllerManager.IsControllerBound(System.Int32,Eco.Core.Controller.IMvcNetClient)">
            <summary> Checks if a controller with <paramref name="controllerId"/> bounded to <paramref name="client"/>. </summary>
        </member>
        <member name="M:Eco.Core.Controller.ControllerManager.TryUnBindController(Eco.Core.Controller.IController,Eco.Core.Controller.IMvcNetClient)">
            <summary>Remove the controller from the given client, and remove it from the list of bound controllers if there are no other bound clients. Return true if it was bound to the client
            and is now removed..</summary>
        </member>
        <member name="M:Eco.Core.Controller.ControllerManager.RemoveFromControllerDictionaryIfNoBindings(Eco.Core.Controller.IController)">
            <summary>Removes the controller instance from the dictionary of controllers if there are no bound clients to it.</summary>
        </member>
        <member name="M:Eco.Core.Controller.ControllerManager.NotifyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary> For use with INotifyPropertyChanged, set as the PropertyChanged event handler. </summary>
        </member>
        <member name="M:Eco.Core.Controller.ControllerManager.NotifyChanged(Eco.Core.Controller.IController,System.String)">
            <summary>Tag the given property on the given controller to be synced to clients, ignoring the call if the controller is bound to nothing.</summary>
        </member>
        <member name="M:Eco.Core.Controller.ControllerManager.NotifySubscriptions(Eco.Core.Controller.IController,System.String)">
            <summary>Notifies server side subscriptions about property change.</summary>
        </member>
        <member name="M:Eco.Core.Controller.ControllerManager.NotifyClients(Eco.Core.Controller.IController,System.String)">
            <summary>Notifies bounded clients about property change.</summary>
        </member>
        <member name="M:Eco.Core.Controller.ControllerManager.PackageController(Eco.Core.Controller.IController,Eco.Core.Controller.IMvcNetClient,Eco.Core.Controller.ControllerManager.PackageFlags)">
            <summary>Package up the given controller for the given client.
            This function will:
             - Generate an ID for the controller if it doesnt exist
             - Generate a ControllerInstanceInfo and add it to the 'controllers' dictionary if it's not in there yet.
             - Bind the client to the controller, if they aren't already bound.</summary>
        </member>
        <member name="M:Eco.Core.Controller.ControllerManager.PropertySyncs(Eco.Core.Controller.IController,System.String)">
            <summary>Return true if the property is syncs to the client (marked SyncToView or Eco) </summary>
        </member>
        <member name="M:Eco.Core.Controller.ControllerManager.GetControllerTypeId(System.Type)">
            <summary> Returns controller type id (<see cref="F:Eco.Shared.View.ViewClassInfo.TypeID"/>) for <paramref name="type"/>. </summary>
        </member>
        <member name="M:Eco.Core.Controller.ControllerManager.HasViewType(System.Type)">
            <summary>Checks if corresponding View type exists for the controller.</summary>
        </member>
        <member name="T:Eco.Core.Controller.ControllerMarshaler">
            <summary><see cref="T:Eco.Core.Controller.ControllerMarshaler"/> helps to convert controller to client view.</summary>
            <inheritdoc cref="T:Eco.Core.Controller.IControllerMarshaler"/>
        </member>
        <member name="M:Eco.Core.Controller.ControllerMarshaler.GetAllInterfaces">
            <summary>Returns own implemented interfaces (not inherited from base types).</summary>
        </member>
        <member name="M:Eco.Core.Controller.ControllerMarshaler.GetOwnInterfaces">
            <summary>Returns own implemented interfaces (not inherited from base types).</summary>
        </member>
        <member name="T:Eco.Core.Controller.ControllerMarshalerService">
            <summary>Service for managing <see cref="T:Eco.Core.Controller.IControllerMarshaler"/> creation and providing marshaling info for <see cref="T:Eco.Core.Controller.ControllerManager"/> and <see cref="T:Eco.Core.Controller.ViewCodeGenerator"/>.</summary>
        </member>
        <member name="M:Eco.Core.Controller.ControllerMarshalerService.GetMarshalers">
            <summary>Returns all unique controller marshalers. Only available after <see cref="M:Eco.Core.Controller.ControllerMarshalerService.CreateMarshalers"/>.</summary>
        </member>
        <member name="M:Eco.Core.Controller.ControllerMarshalerService.TryGetSyncMemberInfo(System.Type,System.String,Eco.Core.Controller.ISyncMemberInfo@)">
            <summary>Returns <paramref name="syncPropertyInfo"/> for <paramref name="propertyName"/> (either property or sync-to-view method) of <paramref name="controllerType"/> if available.</summary>
        </member>
        <member name="M:Eco.Core.Controller.ControllerMarshalerService.GetMarshalingTypes">
            <summary>Returns all marshaling types (which may be marshaled to client).</summary>
        </member>
        <member name="M:Eco.Core.Controller.ControllerMarshalerService.CreateMarshalers">
            <summary> Calculate and cache all the data needed to manage syncing of controllers. </summary>
        </member>
        <member name="M:Eco.Core.Controller.ControllerMarshalerService.PreAssignNameIDs">
            <summary>Ensures all name IDs assigned to same numbers no matter of parallel execution order.</summary>
        </member>
        <member name="M:Eco.Core.Controller.ControllerMarshalerService.SortMarshalers">
            <summary>Ensures all marshalers same order no matter of execution order.</summary>
        </member>
        <member name="M:Eco.Core.Controller.ControllerMarshalerService.AddBasicTypes">
            <summary>Used to create view class infos for basic types, will create as BooleanView, SingleView, StringVew, Vector3iView, etc.</summary>
        </member>
        <member name="M:Eco.Core.Controller.ControllerMarshalerService.GetOrAddMarshaler(System.Type)">
            <summary>Returns <see cref="T:Eco.Core.Controller.ControllerMarshaler"/> for the <paramref name="type"/>. That marshaler can be used to generate View and serialize to BSON.</summary>
        </member>
        <member name="M:Eco.Core.Controller.ControllerMarshalerService.GetOrAddClassMarshalerRecursive(System.Type)">
            <summary>Get or adds <see cref="M:Eco.Core.Controller.ControllerMarshalerService.GetOrAddMarshaler(System.Type)"/> for <paramref name="type"/>. If the type shouldn't have own <see cref="T:Eco.Core.Controller.IControllerMarshaler"/> then it will reuse base class marshaler.</summary>
        </member>
        <member name="M:Eco.Core.Controller.ControllerMarshalerService.TryGetMarshaler(System.Type,Eco.Core.Controller.IControllerMarshaler@)">
            <summary>Returns existing <see cref="T:Eco.Core.Controller.IControllerMarshaler"/> (previously created with <see cref="M:Eco.Core.Controller.ControllerMarshalerService.CreateMarshalers"/>).</summary>
        </member>
        <member name="M:Eco.Core.Controller.ControllerMarshalerService.TryGetOrAddClassMarshaler(System.Type,Eco.Core.Controller.IControllerMarshaler@)">
            <summary>Same as <see cref="M:Eco.Core.Controller.ControllerMarshalerService.GetOrAddClassMarshalerRecursive(System.Type)"/>, but checks if <paramref name="type"/> is not null and is <see cref="T:Eco.Core.Controller.IController"/>.</summary>
        </member>
        <member name="M:Eco.Core.Controller.ControllerMarshalerService.WillHaveView(System.Type)">
            <summary>Checks if View should be generated for <paramref name="type"/>.</summary>
        </member>
        <member name="M:Eco.Core.Controller.ControllerMarshalerService.AddViewMemberInfo(Eco.Core.Controller.IControllerMarshaler,System.Reflection.MemberInfo)">
            <summary>Creates <see cref="T:Eco.Shared.View.ViewMemberInfo"/> from <paramref name="memberInfo"/> and adds it to <see cref="P:Eco.Core.Controller.ControllerMarshaler.NameToProperty"/> mapping.</summary>
        </member>
        <member name="M:Eco.Core.Controller.ControllerMarshalerService.BuildProperties(Eco.Core.Controller.ControllerMarshaler)">
            <summary>Builds properties info for <paramref name="marshaler"/>.</summary>
        </member>
        <member name="M:Eco.Core.Controller.ControllerMarshalerService.BuildMethods(Eco.Core.Controller.ControllerMarshaler)">
            <summary>Builds methods info for <paramref name="marshaler"/>.</summary>
        </member>
        <member name="M:Eco.Core.Controller.ControllerMarshalerService.BuildDependencies(Eco.Core.Controller.ControllerMarshaler)">
            <summary>Builds member dependencies mapping between sync member and properties which depends on it.</summary>
        </member>
        <member name="M:Eco.Core.Controller.ControllerMarshalerService.BuildRPCs(Eco.Core.Controller.ControllerMarshaler)">
            <summary>Builds RPCs list for <paramref name="marshaler"/>.</summary>
        </member>
        <member name="M:Eco.Core.Controller.ControllerMarshalerService.BuildViewClassInfo(Eco.Core.Controller.ControllerMarshaler)">
            <summary>Builds <see cref="T:Eco.Shared.View.ViewClassInfo"/> for <paramref name="marshaler"/>.</summary>
        </member>
        <member name="M:Eco.Core.Controller.ControllerMarshalerService.BuildClassMarshaler(Eco.Core.Controller.ControllerMarshaler)">
            <summary>Builds internal info for <paramref name="marshaler"/>.</summary>
        </member>
        <member name="M:Eco.Core.Controller.ControllerMarshalerService.GetDependencies(System.Type,System.String)">
            <summary>Get dependent properties/methods, if any.</summary>
        </member>
        <member name="M:Eco.Core.Controller.ControllerMarshalerService.CreateViewMemberInfo(System.Reflection.MemberInfo)">
            <summary>Creates <see cref="T:Eco.Shared.View.ViewMemberInfo"/> from <paramref name="info"/>.</summary>
        </member>
        <member name="M:Eco.Core.Controller.ControllerMarshalerService.GetSimpleName(System.String)">
            <summary>Returns simple name (without explicit interface specification). I.e. Eco.Core.Systems.IRegistrar.IdToObj => IdToObj.</summary>
        </member>
        <member name="M:Eco.Core.Controller.ControllerMarshalerService.RegisterName(System.String)">
            <summary>Add the <paramref name="name"/> (if missing) to the <see cref="F:Eco.Core.Controller.ControllerMarshalerService.MemberNameToID"/> lookup and returns mapped IDs.</summary>
        </member>
        <member name="M:Eco.Core.Controller.ControllerMarshalerService.GetLegacyViewTypeName(System.Type)">
            <summary>Returns view type name compatible with old controller type based implementation (returning view type name if it doesn't exists on the client). Should be eventually refactored.</summary>
        </member>
        <member name="M:Eco.Core.Controller.ControllerMarshalerService.GetViewTypeName(System.Type)">
            <summary>Returns view type name for <paramref name="type"/> either from corresponding marshaler or auto-generated with <see cref="M:Eco.Core.Controller.ControllerMarshalerService.GenerateDefaultViewTypeName(System.Type)"/>.</summary>
        </member>
        <member name="M:Eco.Core.Controller.ControllerMarshalerService.GenerateDefaultViewTypeName(System.Type)">
            <summary>Generates default view type name for <paramref name="type"/>.</summary>
        </member>
        <member name="T:Eco.Core.Controller.ControllerSubscriptions">
            <summary>Holds controller subscriptions for <see cref="T:Eco.Core.Controller.ControllerManager"/>. Compatible with <see cref="T:Eco.Shared.View.IObservable"/> interface for Subscriptions System.</summary>
        </member>
        <member name="P:Eco.Core.Controller.ControllerSubscriptions.DebugName">
            <summary> Name used for debug purposes. </summary>
        </member>
        <member name="M:Eco.Core.Controller.ControllerSubscriptions.SubscribeUnique(Eco.Shared.View.IPropertySubscription)">
            <summary>Adds <paramref name="newSubscription"/> if it wasn't already added. Returns <c>false</c> if existed.</summary>
        </member>
        <member name="M:Eco.Core.Controller.ControllerSubscriptions.IsSubscribed(System.Collections.Immutable.ImmutableList{Eco.Shared.View.IPropertySubscription},Eco.Shared.View.IPropertySubscription)">
            <summary>Checks if <paramref name="subscription"/> is in list of <paramref name="subscriptions"/>.</summary>
        </member>
        <member name="M:Eco.Core.Controller.ControllerSubscriptions.Subscribe(Eco.Shared.View.IPropertySubscription)">
            <summary>Same as <see cref="M:Eco.Core.Controller.ControllerSubscriptions.SubscribeUnique(Eco.Shared.View.IPropertySubscription)"/>, but will report fail in Debug mode if subscription isn't unique. It won't add new subscription though!</summary>
        </member>
        <member name="M:Eco.Core.Controller.ControllerSubscriptions.Unsubscribe(Eco.Shared.View.IPropertySubscription)">
            <summary>Removes previously added with <see cref="M:Eco.Core.Controller.ControllerSubscriptions.Subscribe(Eco.Shared.View.IPropertySubscription)"/> or <see cref="M:Eco.Core.Controller.ControllerSubscriptions.SubscribeUnique(Eco.Shared.View.IPropertySubscription)"/> subscription.</summary>
        </member>
        <member name="M:Eco.Core.Controller.ControllerSubscriptions.Unsubscribe(System.String,System.Action)">
            <summary>Removes all subscriptions with <paramref name="callback"/> for <paramref name="propertyName"/>.</summary>
        </member>
        <member name="M:Eco.Core.Controller.ControllerSubscriptions.RemoveSubscriptions``1(System.String,``0,System.Func{``0,System.Collections.Immutable.ImmutableList{Eco.Shared.View.IPropertySubscription},System.Collections.Immutable.ImmutableList{Eco.Shared.View.IPropertySubscription}})">
            <summary>Unsubscribe helper. Removes subscription(s) with <paramref name="remove"/> function and cleanups mapping if it was last subscription for property.</summary>
        </member>
        <member name="M:Eco.Core.Controller.ControllerSubscriptions.RemoveFromSubscriptions``1(System.Collections.Immutable.ImmutableList{Eco.Shared.View.IPropertySubscription},System.String,``0,System.Func{``0,System.Collections.Immutable.ImmutableList{Eco.Shared.View.IPropertySubscription},System.Collections.Immutable.ImmutableList{Eco.Shared.View.IPropertySubscription}})">
            <summary>Removes subscription(s) with <paramref name="remove"/> function and cleanups mapping if it was last subscription for property. Tries with <paramref name="subscriptions"/> first, but in case of concurrent modification will re-fetch value from <see cref="P:Eco.Core.Controller.ControllerSubscriptions.ChangedCallbacks"/>.</summary>
        </member>
        <member name="M:Eco.Core.Controller.ControllerSubscriptions.NotifyChanged(System.String)">
            <summary>Notifies all subscriptions about property change.</summary>
        </member>
        <member name="M:Eco.Core.Controller.ControllerSubscriptions.Cleanup">
            <summary>Removes all "dead" subscriptions.</summary>
        </member>
        <member name="T:Eco.Core.Controller.ForwardAttribute">
            <summary>Base class for attributes allowing forwarding of some actions from a property to a class containing that property.</summary>
        </member>
        <member name="F:Eco.Core.Controller.ForwardAttribute.PropertyMember">
            <summary>The name of the member on the property we're marking</summary>
        </member>
        <member name="F:Eco.Core.Controller.ForwardAttribute.ThisMethod">
            <summary>The name of the method on 'this' that we want to call</summary>
        </member>
        <member name="T:Eco.Core.Controller.ForwardEventAttribute">
            <summary>
            Allows a class to forward events on a property to its own methods, updating the subscriptions when the property changes.
            <br></br><br></br>
            IE, CreditComponent has a property containing a BankAccount and it uses this attribute to call one of its own methods whenever BalanceChanged event is raised.
            With this attribute, when the bank account changes this subscription will be properly unsubscribed from the old and resubscribed to the new.
            <br></br><br></br>
            NOTE: When putting this on a property in a class, you must also hook it up to fody. To do this add this line, which will get magically called by fody:
            <code>
            public void OnPropertyChanged(string propertyName, object before, object after) => ForwardEventsAttribute.DoForwarding(this, propertyName, before, after);
            </code>
            </summary>
            <remarks>
            See <see cref="M:Eco.Core.Controller.ForwardingUtils.CleanupForwarding(System.Object)"/> before use.
            </remarks>
        </member>
        <member name="T:Eco.Core.Controller.ForwardPropertyChangeAttribute">
            <summary>
            Allows a class to forward property changed callbacks from its property to its own methods, updating the subscriptions when the property changes.
            This attribute can only be applied to a property of type that implements <see cref="T:Eco.Core.Controller.IController"/> interface.
            <br></br><br></br>
            IE, CreditComponent has a property containing a BankAccount and it uses this attribute to call one of its own methods whenever value of BankAccount.Name changes
            With this attribute, when the bank account changes this subscriptions will be properly unsubscribed from the old and resubscribed to the new.
            <br></br><br></br>
            NOTE: When putting this on a property in a class, you must also hook it up to fody. To do this add this line, which will get magically called by fody:
            <code>
            public void OnPropertyChanged(string propertyName, object before, object after) => ForwardEventsAttribute.DoForwarding(this, propertyName, before, after);
            </code>
            </summary>
        </member>
        <member name="M:Eco.Core.Controller.ForwardingUtils.DoForwarding(System.Object,System.String,System.Object,System.Object)">
            <summary>Check if the passed property has a ForwardSubscriptions attribute, and perform the unsubscribe on the old property and
            subscribe on the new one.</summary>
        </member>
        <member name="M:Eco.Core.Controller.ForwardingUtils.CleanupForwarding(System.Object)">
            <summary>Remove all subscribtions created by <see cref="M:Eco.Core.Controller.ForwardingUtils.DoForwarding(System.Object,System.String,System.Object,System.Object)"/> method.</summary>
            <remarks>
            This method should be called by object using <see cref="T:Eco.Core.Controller.ForwardAttribute"/> when it's destoryed to make sure it can be garbage collected.
            It is save to not call this method when all use cases of <see cref="T:Eco.Core.Controller.ForwardAttribute"/> in a class are one of the following cases:
            <list type="bullet">
            <item>
            <see cref="T:Eco.Core.Controller.ForwardPropertyChangeAttribute"/> is used
            </item>
            <item>
            <see cref="T:Eco.Core.Controller.ForwardEventAttribute"/> is used to forward event from an object that would be eligible for garbage collection if it wasn't referenced by object to which events are forwarded
            </item>
            </list>
            </remarks>
        </member>
        <member name="T:Eco.Core.Controller.Generators.RPCMethodGenerationHelper">
            <summary><see cref="T:Eco.Shared.Networking.RPCMethod"/> generation helper for return type string and method signature.</summary>
        </member>
        <member name="M:Eco.Core.Controller.Generators.RPCMethodGenerationHelper.GenerateReturnType(Eco.Shared.Networking.RPCMethod,Eco.Core.Controller.ControllerMarshalerService)">
            <summary>Generates return type string for <paramref name="rpc"/>.</summary>
        </member>
        <member name="M:Eco.Core.Controller.Generators.RPCMethodGenerationHelper.GenerateMethodSignature(Eco.Shared.Networking.RPCMethod,Eco.Core.Controller.ControllerMarshalerService)">
            <summary>Generates method signature for <paramref name="rpc"/>.</summary>
        </member>
        <member name="T:Eco.Core.Controller.Generators.TypeGenerationHelper">
            <summary>Helper class with utility functions for View types generation.</summary>
        </member>
        <member name="M:Eco.Core.Controller.Generators.TypeGenerationHelper.GenerateViewTypeName(System.Type,Eco.Core.Controller.ControllerMarshalerService)">
            <summary>Generates type name for view.</summary>
        </member>
        <member name="M:Eco.Core.Controller.ControllerExtensions.WatchProp(System.ComponentModel.INotifyPropertyChanged,System.ComponentModel.PropertyChangedEventHandler)">
            <summary>Watch for a property changing through the fody system.</summary>
        </member>
        <member name="M:Eco.Core.Controller.ControllerExtensions.WatchProp(System.ComponentModel.INotifyPropertyChanged,System.String,System.Action{System.Object})">
            <summary>Watch for a property changing through the fody system.</summary>
        </member>
        <member name="M:Eco.Core.Controller.ControllerExtensions.WatchPropertyOnAllEntries``1(System.Collections.Generic.IEnumerable{``0},Eco.Core.Utils.TrackingCallbacks,System.ComponentModel.PropertyChangedEventHandler)">
            <summary>Makes sure <paramref name="handler"/> is called whenever value of any property changes in any element of <paramref name="collection"/></summary>
            <param name="callbacks"><see cref="T:Eco.Core.Utils.TrackingCallbacks"/> for <paramref name="collection"/></param>
        </member>
        <member name="M:Eco.Core.Controller.ControllerExtensions.WatchPropertyOnAllEntries``1(System.Collections.Generic.IEnumerable{``0},Eco.Core.Utils.TrackingCallbacks,System.String,System.Action{System.Object})">
            <summary>Makes sure <paramref name="onChange"/> is called whenever value of property with name <paramref name="propertyName"/> changes in any element of <paramref name="collection"/></summary>
            <param name="callbacks"><see cref="T:Eco.Core.Utils.TrackingCallbacks"/> for <paramref name="collection"/></param>
        </member>
        <member name="M:Eco.Core.Controller.ControllerExtensions.Changed(Eco.Core.Controller.IController,System.String,Eco.Core.Plugins.Interfaces.ISaveablePlugin,System.String)">
            <summary> For classes that have a 'Description' variable or other some such that should change whenever a child changes. </summary>
        </member>
        <member name="M:Eco.Core.Controller.ControllerExtensions.SetProperty``1(Eco.Core.Controller.IController,``0@,``0,System.String)">
            <summary> Set a property if it's changed and notify it's changed. No need to set name if used in a propery. </summary>
        </member>
        <member name="M:Eco.Core.Controller.ControllerExtensions.Subscribe(Eco.Core.Controller.IController,System.String,System.Action)">
            <summary> Relay subscription calls to the controller object. </summary>
            <remarks> Subscriptions require the Controller object exists, so try to bind them here. </remarks>
        </member>
        <member name="M:Eco.Core.Controller.ControllerExtensions.SubscribeAndCall(Eco.Core.Controller.IController,System.String,System.Action)">
            <summary> Relay subscription calls to the controller object, then call the method. </summary>
            <remarks> Subscriptions require the Controller object exists, so try to bind them here. </remarks>
        </member>
        <member name="M:Eco.Core.Controller.ControllerExtensions.SubscribeUnique(Eco.Core.Controller.IController,System.String,System.Action)">
            <summary> Relay subscription calls to the controller object, if a subscription with the same callback is not already bound. </summary>
            <remarks> Subscriptions require the Controller object exists, so try to bind them here. </remarks>
        </member>
        <member name="M:Eco.Core.Controller.ControllerExtensions.Unsubscribe(Eco.Core.Controller.IController,System.String,System.Action)">
            <summary> Unsubscribe previously subscribed controller. Returns false if there wasn't such subscription. </summary>
        </member>
        <member name="M:Eco.Core.Controller.ControllerExtensions.Subscribe(Eco.Core.Controller.IController,Eco.Shared.View.ISubscriptions,System.String,System.Action)">
            <inheritdoc cref="M:Eco.Core.Controller.ControllerManager.SubscribeController(Eco.Core.Controller.IController,Eco.Shared.View.ISubscriptions,System.String,System.Action)"/>
        </member>
        <member name="M:Eco.Core.Controller.ControllerExtensions.SubscribeAndCall(Eco.Core.Controller.IController,Eco.Shared.View.ISubscriptions,System.String,System.Action)">
            <inheritdoc cref="M:Eco.Core.Controller.ControllerManager.SubscribeControllerAndCall(Eco.Core.Controller.IController,Eco.Shared.View.ISubscriptions,System.String,System.Action)"/>
        </member>
        <member name="M:Eco.Core.Controller.ControllerExtensions.SubscribeUnique(Eco.Core.Controller.IController,Eco.Shared.View.ISubscriptions,System.String,System.Action)">
            <inheritdoc cref="M:Eco.Core.Controller.ControllerManager.SubscribeControllerUnique(Eco.Core.Controller.IController,Eco.Shared.View.ISubscriptions,System.String,System.Action)"/>
        </member>
        <member name="M:Eco.Core.Controller.ControllerExtensions.SubscribeUniqueAndCall(Eco.Core.Controller.IController,Eco.Shared.View.ISubscriptions,System.String,System.Action)">
            <inheritdoc cref="M:Eco.Core.Controller.ControllerManager.SubscribeControllerUniqueAndCall(Eco.Core.Controller.IController,Eco.Shared.View.ISubscriptions,System.String,System.Action)"/>
        </member>
        <member name="M:Eco.Core.Controller.ControllerExtensions.SubscribeAllRecursive(Eco.Shared.View.ISubscriptions,Eco.Core.Controller.IController,System.Action{System.Reflection.PropertyInfo,System.Object},System.Func{System.Reflection.PropertyInfo,System.Boolean},System.Reflection.PropertyInfo)">
            <summary> Subscribe to ALL sync parameters, and ALL the children of those sync parameters that are also controllers. </summary>
        </member>
        <member name="M:Eco.Core.Controller.ControllerExtensions.SubscribeAllPropsRecursive(System.Collections.Generic.IEnumerable{Eco.Core.Controller.IController},Eco.Core.Utils.TrackingCallbacks,Eco.Shared.View.ISubscriptions,System.Action{System.Reflection.PropertyInfo,System.Object})">
            <summary>Watch of changes of all properties marked with <see cref = "T:Eco.Shared.Networking.ScanPropAttribute" /> in the collection recursively, which can be useful for updates in complex structures with nested objects, like Election. <b>NOTE: As it subscribes for everything it's very ineffective method. Avoid if possible.</b></summary>
        </member>
        <member name="T:Eco.Core.Controller.IController">
            <summary>
            1. Needs this block to implement the interfaces
            int IHasUniversalID.ControllerID { get; set; }
            2. Add [SyncToView] to properties/methods you wish to synchronize with the view.
            </summary>
        </member>
        <member name="T:Eco.Core.Controller.ReadOnlyControllerAttribute">
            <summary> Marks when a controller is read-only, which prevents recursive subscriptions from delving into it.</summary>
        </member>
        <member name="T:Eco.Core.Controller.DependsOnAttribute">
            <summary> This attribute says that this view value depends on another's, so send that result as well
            when it changes. Note that dependencies which are not 'synctoview' will not be found.</summary>
        </member>
        <member name="T:Eco.Core.Controller.IControllerMarshaler">
            <summary>Base interface for all controller marshalers (enums, IController classes, primitive types).</summary>
        </member>
        <member name="M:Eco.Core.Controller.IControllerMarshaler.GetSyncMemberInfos">
            <summary>Returns all sync property infos for the marshaled type as pairs of (nameId, memberSyncInfo).</summary>
        </member>
        <member name="M:Eco.Core.Controller.IControllerMarshaler.TryGetSyncMemberInfo(System.Int32,Eco.Core.Controller.ISyncMemberInfo@)">
            <summary>Tries to get sync info for member with <paramref name="nameId"/>.</summary>
        </member>
        <member name="M:Eco.Core.Controller.IControllerMarshaler.TryGetDependentMembers(System.String,System.String[]@)">
            <summary>Tries to get other members which depends on <paramref name="memberName"/>.</summary>
        </member>
        <member name="M:Eco.Core.Controller.IControllerMarshaler.GetAllInterfaces">
            <summary>Returns all interfaces implemented by class.</summary>
        </member>
        <member name="M:Eco.Core.Controller.IControllerMarshaler.GetOwnInterfaces">
            <summary>Returns only own interfaces implemented by class (non-inherited).</summary>
        </member>
        <member name="M:Eco.Core.Controller.IControllerMarshaler.CreateInstance">
            <summary>Creates instance of controller.</summary>
        </member>
        <member name="T:Eco.Core.Controller.ImmutablePropertySubscription">
            <summary>Immutable implementation of <see cref="T:Eco.Shared.View.IPropertySubscription"/> used by controller to prevent concurrent modifications (i.e. <see cref="T:Eco.Shared.View.PropertySubscription"/> may be recycled and destroy it's state).</summary>
        </member>
        <member name="T:Eco.Core.Controller.ISyncMemberInfo">
            <summary>Interface for <see cref="T:Eco.Core.Controller.SyncToViewAttribute"/> members info. Used by <see cref="T:Eco.Core.Controller.ControllerManager"/> for serialization.</summary>
        </member>
        <member name="M:Eco.Core.Controller.SubscriptionUtils.UpdateSubject``1(``0@,``0,System.String,System.Action)">
            <summary>
            Updates subscription subject (action emitter). It is thread-safe and ensures old subscription removed from <paramref name="subject"/> even in concurrent environment.
            It possible though that both <paramref name="newSubject"/> and <paramref name="subject"/> subscribed. it is very rare case, but you should aware of it.
            It happens if action removed from old subject, but subject changed in another thread after this, before new subject assigned (it will be removed anyway because of interlocked change, but it may exists for short period of time).
            </summary>
        </member>
        <member name="T:Eco.Core.Controller.SyncMemberInfoBase">
            <summary>Base class for <see cref="T:Eco.Core.Controller.ISyncMemberInfo"/> implementations with shared logic.</summary>
        </member>
        <member name="M:Eco.Core.Controller.SyncMemberInfoBase.GetAccessMethodInfo(System.Reflection.MethodInfo)">
            <summary>Returns <see cref="T:System.Reflection.MethodInfo"/> which may be used for getter generation. For generic type definitions it will try to use declaring type (base type or interface).</summary>
            <exception cref="T:System.ArgumentException">If this member may not be accessed via both reflected and declaring type.</exception>
        </member>
        <member name="T:Eco.Core.Controller.SyncMethodInfo">
            <summary><see cref="T:Eco.Core.Controller.ISyncMemberInfo"/> for [SyncToView] methods.</summary>
        </member>
        <member name="M:Eco.Core.Controller.SyncMethodInfo.CreateDelegate(System.Reflection.MethodInfo)">
            <summary>Creates compiled delegate for call of <paramref name="methodInfo"/> for sync-to-view value access. Works with no-arg methods and methods with single argument (for observer).</summary>
        </member>
        <member name="M:Eco.Core.Controller.SyncMethodInfo.ConvertToObserverArg(System.Linq.Expressions.Expression,System.Type)">
            <summary>Converts <paramref name="client"/> to observer arg <see cref="T:System.Linq.Expressions.Expression`1"/> for <see cref="F:Eco.Core.Controller.SyncMethodInfo.getValue"/> delegate.</summary>
        </member>
        <member name="T:Eco.Core.Controller.SyncPropertyInfo">
            <summary>Builds info about a given property that is marked SyncToView, and synced between the server an client.</summary>
        </member>
        <member name="M:Eco.Core.Controller.SyncPropertyInfo.CreateDelegate(System.Reflection.PropertyInfo)">
            <summary>Creates compiled delegate for call of <paramref name="propertyInfo"/> for sync-to-view value access. Works with no-arg methods and methods with single argument (for observer).</summary>
        </member>
        <member name="M:Eco.Core.Controller.SyncPropertyInfo.GetAccessPropertyInfo(System.Reflection.PropertyInfo)">
            <summary>Returns property info via which value may be accessed. May be different if original property info type is generic type definition.</summary>
        </member>
        <member name="T:Eco.Core.Controller.SyncToViewAttribute">
            <summary> SyncToView denotes a property or method result as a value that exists in the view on the client. </summary>
        </member>
        <member name="T:Eco.Core.Controller.WatchSubProperties">
            <summary>When a property is given this attribute, any changes to the sub-properties of that object will trigger the SubPropertyChanged call on the container class,
            which must implement IWatchesSubProperties.  This serves as an extension to Fody's 'OnPropertyChanged' functionality, allowing it to watch properties inside your properties.</summary>
        </member>
        <member name="M:Eco.Core.Controller.WatchesSubPropertiesExtensions.InitializeSubPropertyWatching(Eco.Core.Controller.IWatchesSubProperties)">
            <summary>Must be called by sub-property watchers to setup watching.</summary>
        </member>
        <member name="T:Eco.Core.DebugStatistic.Collectors.EventMetricCollector">
            <summary>Base class for all <seealso cref="T:System.Diagnostics.Tracing.EventListener"/> based <seealso cref="T:Eco.Core.DebugStatistic.Collectors.IMetricCollector"/> instances.</summary>
            <inheritdoc/>
        </member>
        <member name="F:Eco.Core.DebugStatistic.Collectors.EventMetricCollector.listenerKeyword">
            <summary>Integer keyword value used to initialize our <seealso cref="T:System.Diagnostics.Tracing.EventListener"/> instance.</summary>
        </member>
        <member name="F:Eco.Core.DebugStatistic.Collectors.EventMetricCollector.metricPrefix">
            <summary>Represents the prefix value used to store metrics with <seealso cref="T:Eco.Core.DebugStatistic.PerformancePlugin"/>. MetricPrefix.XXXX = Value.</summary>
        </member>
        <member name="M:Eco.Core.DebugStatistic.Collectors.EventMetricCollector.StoreMetric(System.String,System.Double)">
            <inheritdoc cref="M:Eco.Core.DebugStatistic.PerformancePlugin.StoreValueMetric(System.String,System.Double)"/>
        </member>
        <member name="M:Eco.Core.DebugStatistic.Collectors.EventMetricCollector.GetMetric(System.String)">
            <inheritdoc cref="M:Eco.Core.DebugStatistic.PerformancePlugin.GetValueMetric(System.String)"/>
        </member>
        <member name="M:Eco.Core.DebugStatistic.Collectors.EventMetricCollector.StoreEventData(System.Diagnostics.Tracing.EventWrittenEventArgs)">
            <summary>Stores the payload of an <seealso cref="T:System.Diagnostics.Tracing.EventWrittenEventArgs"/> object from the <seealso cref="T:System.Diagnostics.Tracing.EventListener"/> as metrics in the <seealso cref="T:Eco.Core.DebugStatistic.PerformancePlugin"/> singleton instance.</summary>
            <param name="eventData">Event payload to store as metrics.</param>
        </member>
        <member name="T:Eco.Core.DebugStatistic.Collectors.GCEventId">
            <summary>
            <para>Represents all supported GC event ids under Keyword 0x0000001.</para>
            <para>These values were taken from https://docs.microsoft.com/en-us/dotnet/framework/performance/garbage-collection-etw-events</para>
            </summary>
        </member>
        <member name="T:Eco.Core.DebugStatistic.Collectors.GCMetricCollector">
            <summary>Implementation of <see cref="T:Eco.Core.DebugStatistic.Collectors.IMetricCollector"/> for collecting information and metrics about the .NET Garbage Collector.</summary>
            <inheritdoc/>
        </member>
        <member name="M:Eco.Core.DebugStatistic.Collectors.GCMetricCollector.StoreTimedEventMetric(System.String,Eco.Core.DebugStatistic.Collectors.GCEventId,Eco.Core.DebugStatistic.Collectors.GCEventId,Eco.Core.DebugStatistic.Collectors.GCEventId)">
            <summary>Updates/Stores a timed metric value based on the event being triggered.</summary>
            <param name="label">Metric label/name to modify</param>
            <param name="triggerEvent">The <seealso cref="T:Eco.Core.DebugStatistic.Collectors.GCEventId"/> id currently being triggered.</param>
            <param name="startEvent">The <seealso cref="T:Eco.Core.DebugStatistic.Collectors.GCEventId"/> responsible for starting the timer.</param>
            <param name="endEvent">The <seealso cref="T:Eco.Core.DebugStatistic.Collectors.GCEventId"/> responsible for stopping the timer.</param>
        </member>
        <member name="M:Eco.Core.DebugStatistic.Collectors.GCMetricCollector.StoreCountEventMetric(System.String,Eco.Core.DebugStatistic.Collectors.GCEventId,Eco.Core.DebugStatistic.Collectors.GCEventId,Eco.Core.DebugStatistic.Collectors.GCEventId)">
            <summary>Increments/Decrements a metric value based on the type of event being processed.</summary>
            <param name="label">Metric label/name to modify</param>
            <param name="triggerEvent">The <seealso cref="T:Eco.Core.DebugStatistic.Collectors.GCEventId"/> id currently being triggered.</param>
            <param name="incrementEvent">The <seealso cref="T:Eco.Core.DebugStatistic.Collectors.GCEventId"/> responsible for incrementing the metric value.</param>
            <param name="decrementEvent">The <seealso cref="T:Eco.Core.DebugStatistic.Collectors.GCEventId"/> responsible for decrementing the metric value.</param>
        </member>
        <member name="T:Eco.Core.DebugStatistic.Collectors.IMetricCollector">
            <summary>Base interface for all metric collectors used by <seealso cref="T:Eco.Core.DebugStatistic.PerformancePlugin"/>.</summary>
        </member>
        <member name="M:Eco.Core.DebugStatistic.Collectors.IMetricCollector.Initialize">
            <summary>Performs setup/initialization operations on the metric collector instance.</summary>
        </member>
        <member name="M:Eco.Core.DebugStatistic.Collectors.IMetricCollector.Shutdown">
            <summary>Performs shutdown operations on the metric collector instance.</summary>
        </member>
        <member name="T:Eco.Core.DebugStatistic.PerformanceIntervalStat">
            <summary>Custom interval stat counter used by <seealso cref="T:Eco.Core.DebugStatistic.PerformancePlugin"/> for generating reports.</summary>
        </member>
        <member name="M:Eco.Core.DebugStatistic.PerformanceIntervalStat.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Eco.Core.DebugStatistic.PerformancePlugin">
            <summary>Tracks potential performance problems in the server and generates a report.  Eventually we can make these reports output from the server and track them across builds.</summary>
            <inheritdoc/>
        </member>
        <member name="F:Eco.Core.DebugStatistic.PerformancePlugin.IntervalTimes">
            <summary>Configured interval times used by the PerformancePlugin. These values must be multiples of each other.</summary>
        </member>
        <member name="M:Eco.Core.DebugStatistic.PerformancePlugin.AddMetricCollector``1">
            <summary>Registers a new metric collector with the performance plugin instance.</summary>
            <typeparam name="T"><seealso cref="T:Eco.Core.DebugStatistic.Collectors.IMetricCollector"/> type to instantiate/register</typeparam>
        </member>
        <member name="M:Eco.Core.DebugStatistic.PerformancePlugin.HasMetricCollector(System.Type)">
            <summary></summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Eco.Core.DebugStatistic.PerformancePlugin.RemoveMetricCollector(System.Type)">
            <summary>Removes an existing metric collector instance from the performance plugin.</summary>
            <param name="type"><seealso cref="T:Eco.Core.DebugStatistic.Collectors.IMetricCollector"/> type to remove.</param>
        </member>
        <member name="M:Eco.Core.DebugStatistic.PerformancePlugin.StoreValueMetric(System.String,System.Double)">
            <summary>Stores a generic key/value metric for generating reports/publishing to external sources.</summary>
            <param name="name">Name of the metric to store</param>
            <param name="value">Current value of the metric.</param>
        </member>
        <member name="M:Eco.Core.DebugStatistic.PerformancePlugin.GetValueMetric(System.String)">
            <summary>Retrieves the generic key/value metric currently being stored for reports/publishing.</summary>
            <param name="name">Name of the metric to retrieve</param>
            <returns>Stored value if the metric exists. Otherwise 0.</returns>
        </member>
        <member name="M:Eco.Core.DebugStatistic.PerformancePlugin.StoreIntervalMetric(System.String,System.Int32,System.Double,System.Int32,System.Int32)">
            <summary>Stores an interval metric and values for use in the Controller Metrics Report.</summary>
        </member>
        <member name="M:Eco.Core.DebugStatistic.PerformancePlugin.GetMonitoredMetrics">
            <summary>Retrieves the currently stored metrics and metrics being tracked by our <seealso cref="T:Eco.Shared.Tools.PerformanceManager"/> instance for use in external metric publishing.</summary>
        </member>
        <member name="M:Eco.Core.DebugStatistic.PerformancePlugin.Run">
            <summary>Starts our <seealso cref="T:Eco.Core.Utils.Threading.IWorker"/> instance for generating performance reports.</summary>
        </member>
        <member name="M:Eco.Core.DebugStatistic.PerformancePlugin.GenerateIntervalsReport">
            <summary>Generates a report of the currently tracked intervals for displaying on the "Controller Stats" GUI tab.</summary>
        </member>
        <member name="M:Eco.Core.DebugStatistic.PerformancePlugin.GetControllerMetricsReport">
            <summary>Returns the Controller Metrics report for displaying on the "Controller Stats" DisplayTab for the server GUI.</summary>
        </member>
        <member name="M:Eco.Core.DebugStatistic.PerformancePlugin.GetPerformanceManagerReport">
            <summary>Returns the <seealso cref="T:Eco.Shared.Tools.PerformanceManager"/> GetReport results for displaying on the "Performance Manager" DisplayTab for the server GUI.</summary>
        </member>
        <member name="M:Eco.Core.DebugStatistic.PerformancePlugin.GetMetricsReport">
            <summary>Generates and returns the report used in the "Metrics Stats" DisplayTab for the server GUI.</summary>
        </member>
        <member name="M:Eco.Core.DebugStatistic.PerformancePlugin.ToString">
            <summary>Returns a string that represnets this object. Used by the Eco server to properly localize the plugin instance.</summary>
            <returns>Returns a string that represnets this object. </returns>
        </member>
        <member name="T:Eco.Core.Ecopedia.EcopediaUtils">
            <summary> Ecopedia utils. </summary>
        </member>
        <member name="M:Eco.Core.Ecopedia.EcopediaUtils.GetPageName(System.Type,Eco.Core.Items.EcopediaAttribute)">
            <summary> Returns page name for <paramref name="type"/>. If this type is in a subpage, it actually returns the name of the parent page.</summary>
        </member>
        <member name="M:Eco.Core.Ecopedia.EcopediaUtils.GetPageDisplayName(System.Type,Eco.Core.Items.EcopediaAttribute)">
            <summary> Returns page display name for <paramref name="type"/>. </summary>
        </member>
        <member name="T:Eco.Core.Ecopedia.ICustomEcopediaPage">
            <summary>
            By default, ecopedia page displayed in a toolip is defined by a class itself.
            </summary>
        </member>
        <member name="T:Eco.Core.ElasticSearch.ElasticDocument">
            <summary>Represents a storable document for use with ElasticSearch/Kibana.</summary>
        </member>
        <member name="F:Eco.Core.ElasticSearch.ElasticDocument.Services">
            <summary>
            Provides metadata for linking our custom metrics to other data within ElasticSearch/Kibana
            
            Adds the following key/values:
            service.version -> Current Eco server version
            </summary>
        </member>
        <member name="P:Eco.Core.ElasticSearch.ElasticDocument.Service">
            <inheritdoc cref="F:Eco.Core.ElasticSearch.ElasticDocument.Services"/>
        </member>
        <member name="F:Eco.Core.ElasticSearch.ElasticDocument.Hosts">
            <summary>
            Provides metadata for linking our custom metrics by pod/machine within ElasticSearch/Kibana
            
            Adds teh following key/values:
            host.hostname -> Current machine/pod hostname
            </summary>
        </member>
        <member name="P:Eco.Core.ElasticSearch.ElasticDocument.Host">
            <inheritdoc cref="F:Eco.Core.ElasticSearch.ElasticDocument.Hosts"/>
        </member>
        <member name="P:Eco.Core.ElasticSearch.ElasticDocument.Timestamp">
            <summary>Represents the timestamp this document was sent. This is a required constant value.</summary>
        </member>
        <member name="T:Eco.Core.ElasticSearch.ElasticMetricDocument">
            <summary>Represents Eco server metrics stored in ElasticSearch.</summary>
        </member>
        <member name="F:Eco.Core.ElasticSearch.ElasticMetricDocument.Metrics">
            <summary>Key/Value store of Metrics for indexing with ElasticSearch.</summary>
        </member>
        <member name="T:Eco.Core.ElasticSearch.ElasticSearchPlugin">
            <summary>
            <para>
            Handles Eco's custom interaction with ElasticSearch. This plugin provides an interface to track performance metrics with ElasticSearch. To enable this plugin
            you need to set the required environment variables prior to launching the Eco server. 
            </para>
                
            <para>
            These variables are:
            <list type="bullet">
            <item>SLG_ELASTIC_URL - ElasticSearch endpoint to attempt to connect to.</item>
            <item>SLG_ELASTIC_LOGIN - The username and password used to authenticate with the ElasticSearch instance. Must be in username:password format.</item>
            <item>SLG_ELASTIC_INDEX_PREFIX - Prefix used to index documents with ElasticSearch. If this variable is not set the value defaults to "eco-cw".</item>
            </list>
            </para>
            </summary>
            <inheritdoc/>
        </member>
        <member name="F:Eco.Core.ElasticSearch.ElasticSearchPlugin.FlushPeriodInMinutes">
            <summary>Defines the amount of time in minutes between each document flush to ElasticSearch</summary>
        </member>
        <member name="P:Eco.Core.ElasticSearch.ElasticSearchPlugin.ElasticClient">
            <summary> Represents our ElasticSearch highlevel NEST client used by this plugin instance. This value will be NULL if the plugin was not properly configured.</summary>
        </member>
        <member name="P:Eco.Core.ElasticSearch.ElasticSearchPlugin.IsConfigured">
            <summary> Represents the ElasticSearch plugin's current configured state. If the value is true the plugin is configured and running </summary>
        </member>
        <member name="M:Eco.Core.ElasticSearch.ElasticSearchPlugin.GetStatus">
            <summary>Returns the current plugin's operating status.</summary>
            <returns>Current status of the plugin</returns>
        </member>
        <member name="M:Eco.Core.ElasticSearch.ElasticSearchPlugin.Initialize(Eco.Core.Utils.TimedTask)">
            <summary>
            Performs initialization steps on our ElasticSearchPlugin instance. Reads in ElasticSearch environment variables
            and configures our ElasticSearch high level client for use else where in the plugin
            </summary>
        </member>
        <member name="M:Eco.Core.ElasticSearch.ElasticSearchPlugin.PublishLatestMetricsAsync(System.Threading.CancellationToken)">
            <summary>Publishes the current list of stored metrics to ElasticSearch under the metrics index name.</summary>
        </member>
        <member name="M:Eco.Core.ElasticSearch.ElasticSearchPlugin.ToString">
            <summary>Returns a string that represnets this object. Used by the Eco server to properly localize the plugin instance.</summary>
            <returns>Returns a string that represnets this object. </returns>
        </member>
        <member name="T:Eco.Core.ErrorReporting.ExceptionEntryUploadDto">
            <summary>
            Information about a report, suitable for a list.
            </summary>
        </member>
        <member name="P:Eco.Core.ErrorReporting.ExceptionEntryUploadDto.Category">
            <summary> The category for different areas of the code. </summary>
        </member>
        <member name="P:Eco.Core.ErrorReporting.ExceptionEntryUploadDto.Type">
            <summary> The exception's type. </summary>
        </member>
        <member name="P:Eco.Core.ErrorReporting.ExceptionEntryUploadDto.Message">
            <summary> The exception's Message property. </summary>
        </member>
        <member name="P:Eco.Core.ErrorReporting.ExceptionEntryUploadDto.Source">
            <summary> The exception's Source property. </summary>
        </member>
        <member name="P:Eco.Core.ErrorReporting.ExceptionEntryUploadDto.HelpLink">
            <summary> The exception's HelpLink property. </summary>
        </member>
        <member name="P:Eco.Core.ErrorReporting.ExceptionEntryUploadDto.StackTrace">
            <summary> The exception's StackTrace property. </summary>
        </member>
        <member name="P:Eco.Core.ErrorReporting.ExceptionEntryUploadDto.HResult">
            <summary> The exception's HResult property. </summary>
        </member>
        <member name="P:Eco.Core.ErrorReporting.ExceptionEntryUploadDto.ReportingUser">
            <summary> The user id of the logged in user, if any. </summary>
        </member>
        <member name="P:Eco.Core.ErrorReporting.ExceptionEntryUploadDto.Version">
            <summary> The version of the software running. </summary>
        </member>
        <member name="P:Eco.Core.ErrorReporting.ExceptionEntryUploadDto.OS">
            <summary> The OS the server/client is running in. </summary>
        </member>
        <member name="P:Eco.Core.ErrorReporting.ExceptionEntryUploadDto.Language">
            <summary> The UI language the server/client is running in. </summary>
        </member>
        <member name="P:Eco.Core.ErrorReporting.ExceptionEntryUploadDto.SessionId">
            <summary> Random session Id generated by the sender to link multiple exceptions in a session together. </summary>
        </member>
        <member name="P:Eco.Core.ErrorReporting.ExceptionEntryUploadDto.Token">
            <summary> Token for the user if there is one. </summary>
        </member>
        <member name="P:Eco.Core.ErrorReporting.ExceptionEntryUploadDto.Tags">
            <summary> Optional tags for extra data. Format is "key=value,". </summary>
        </member>
        <member name="T:Eco.Core.FileStorage.AbsolutePathAwareStorage">
            <summary>
            Checks if fileName is absolute path and uses file system in this case
            otherwise it uses backing file storage.
            </summary>
        </member>
        <member name="T:Eco.Core.FileStorage.FileSystemStorage">
            <summary>
            File system storage. Uses target directory as constructor argument and works with relative paths.
            </summary>
        </member>
        <member name="M:Eco.Core.Utils.Async.AsyncEnumerableExtensions.MaxAsync``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}},``0)">
            <summary> Returns max value for task results. </summary>
        </member>
        <member name="M:Eco.Core.Utils.Async.AsyncEnumerableExtensions.ToAsyncEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary> Adapts <see cref="T:System.Collections.Generic.IEnumerable`1"/> to <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/>. </summary>
        </member>
        <member name="M:Eco.Core.Utils.Async.AsyncEnumerableExtensions.ToAsyncEnumerable``1(System.Threading.Tasks.Task{``0}[])">
            <summary> Makes <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> from array of <see cref="T:System.Threading.Tasks.Task"/>. </summary>
        </member>
        <member name="M:Eco.Core.Utils.Async.AsyncEnumerableExtensions.ToList``1(System.Collections.Generic.IAsyncEnumerable{``0})">
            <summary> Resolves <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> to <see cref="T:System.Collections.Generic.List`1"/>. </summary>
        </member>
        <member name="T:Eco.Core.Utils.Async.AsyncFactory">
            <summary>
            AsyncFactory creates Task from different async objects.
            </summary>
        </member>
        <member name="M:Eco.Core.Utils.Async.AsyncFactory.FromWaitHandle(System.Threading.WaitHandle,System.Int32,System.Threading.CancellationToken,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Creates Task from <see cref="T:System.Threading.WaitHandle"/>.
            Used code sample from https://stackoverflow.com/questions/24119429/rework-eventwaithandle-to-asynchronously-await-signal.
            </summary>
            <returns>Returns <c>true</c> if event was signaled and <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Eco.Core.Utils.Async.SingleObjectWaiter">
            <summary>Helper class for async operations which need to wait for <see cref="T:System.Threading.WaitHandle"/> in asynchronous manner. Not intended to be used directly, instead use <see cref="M:Eco.Core.Utils.Async.AsyncFactory.FromWaitHandle(System.Threading.WaitHandle)"/>.</summary>
        </member>
        <member name="M:Eco.Core.Utils.Async.SingleObjectWaiter.WaitAsync(System.Threading.WaitHandle,System.Int64,System.Threading.CancellationToken)">
            <summary>Waits until <paramref name="handle"/> notified or until <paramref name="millisecondsTimeoutInterval"/> expired. Returns <see cref="T:System.Threading.Tasks.ValueTask"/> which will be set to <c>true</c> when timeout and to <c>false</c> otherwise.</summary>
        </member>
        <member name="M:Eco.Core.Utils.Async.SingleObjectWaiter.Unregister">
            <summary>Unregisters <see cref="F:Eco.Core.Utils.Async.SingleObjectWaiter.registration"/> if any currently active.</summary>
        </member>
        <member name="M:Eco.Core.Utils.Async.SingleObjectWaiter.RegisterCancellation(System.Threading.CancellationToken)">
            <summary>Registers with the cancellation token to transition the source to a canceled state.</summary>
            <param name="cancellationToken">The cancellation token with which to register.</param>
        </member>
        <member name="M:Eco.Core.Utils.Async.SingleObjectWaiter.UnregisterCancellation">
            <summary>Disposes <see cref="F:Eco.Core.Utils.Async.SingleObjectWaiter.cancellationTokenRegistration"/> and returns <c>true</c> if it wasn't yet requested.</summary>
        </member>
        <member name="M:Eco.Core.Utils.Async.TaskUtils.EnsureComplete``1(System.Threading.Tasks.Task{``0})">
            <summary> Excepts if the task is unfinished, and returns the result otherwise. </summary>
        </member>
        <member name="M:Eco.Core.Utils.Async.TaskUtils.RunWithExceptionLog(System.String,System.Action)">
            <summary> Runs <paramref name="action"/> in background with <see cref="M:System.Threading.Tasks.Task.Run(System.Action)"/>, but wraps call in try-catch for exception logging. </summary>
        </member>
        <member name="M:Eco.Core.Utils.ConcurrentExtensions.Consume``1(System.Collections.Concurrent.IProducerConsumerCollection{``0},System.Int32)">
            <summary>
            Consumes maxAmount elements from <paramref name="queue"/> and returns as array.
            It is thread-safe if <paramref name="queue"/> is thread-safe.
            MaxAmount = -1 means take all elements.
            If will take up to number of elements as available when function called.
            If during function call queue consumed by other threads and in the queue less or equals elements than was when initially requested then result will contain all available elements.
            </summary>
        </member>
        <member name="T:Eco.Core.Utils.ControllerList`1">
            <summary>A thread-safe list of items, which automatically handles changed calls when mutating the list. Initialize must be called before use.</summary>
        </member>
        <member name="M:Eco.Core.Utils.ControllerList`1.TryAdd(Eco.Shared.Networking.INetObject)">
            <summary>Add and use the callbacks if they exist.</summary>
        </member>
        <member name="M:Eco.Core.Utils.ControllerList`1.RemoveAtAndReturn(System.Int32)">
            <summary>Remove the indexed element atomically and return it (and call callbacks on it)</summary>
        </member>
        <member name="T:Eco.Core.Utils.Debugging.CollectionDebugView`1">
            <summary>Allows viewing custom lists better in debugger.  See https://www.codeproject.com/Articles/28405/Make-the-debugger-show-the-contents-of-your-custom</summary>
        </member>
        <member name="T:Eco.Core.Utils.Dispository">
            <summary>
            Dispository (Disposable Repository) used for objects with IDisposable interface which won't be disposed in usual way,
            because they are singletons in example. In shutdown logic you should call DisposeAll to proper dispose all registered objects.
            </summary>
        </member>
        <member name="T:Eco.Core.Utils.DoubleEnumerationGuard">
            <summary>
            Utility class which prevents double-enumeration for <see cref="T:System.Collections.IEnumerable"/>. Some enumerable may not allow double enumeration which leads to invalid state and may use this class for asserts.
            I.e. EnumerableSerializer creates enumerable for Steam. If double enumerated then Stream will return elements from current Stream read position which is invalid after first enumeration.
            </summary>
        </member>
        <member name="T:Eco.Core.Utils.CoreEnumerableExtensions">
            <summary>Extensions for <see cref="T:System.Collections.Generic.IEnumerable`1"/> which aware about Eco.Core collections.</summary>
        </member>
        <member name="M:Eco.Core.Utils.CoreEnumerableExtensions.AsSnapshot``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns snapshot of <paramref name="enumerable"/> using optimized representation if possible.
            It assumes that non thread safe collections (<see cref="T:System.Collections.Generic.List`1"/>, <see cref="T:System.Collections.Generic.HashSet`1"/> and <see cref="T:System.Collections.Generic.Queue`1"/>) not modified from another threads and so returns as is.
            For <see cref="T:Eco.Core.Utils.ThreadSafeList`1"/>, <see cref="T:Eco.Core.Utils.ThreadSafeHashSet`1"/> and <see cref="T:Eco.Core.Utils.ThreadSafeQueue`1"/> it uses <c>Snapshot</c> property.
            With snapshot it guaranteed that you won't have multiple enumeration what ensures stable result and performance for complex LINQ chains.
            It also ensures you won't have collection modified from another threads to avoid inconsistent results.
            </summary>
        </member>
        <member name="T:Eco.Core.Utils.HandleEvent">
            <summary> An event that can have callbacks removed via a passed handle. </summary>
        </member>
        <member name="M:Eco.Core.Utils.ImmutableHelper.ApplyImmutableReturn``2(``0@,System.Func{``0,System.ValueTuple{``0,``1}})">
            <summary> Applies a passed function to an immutable container, and returns the given value that comes back through the tuple.</summary>
            <typeparam name="T">The immutable container</typeparam>
            <typeparam name="TResult">The result of the operation. Can be a bool for success, or some other type (like a list for extracting values)</typeparam>
            <param name="original">The immutable container this is being run upon</param>
            <param name="apply">A function run on every entry of the container, which will return a tuple: (the new updated container, the value to pass back to the caller)</param>
            <returns>Returns the result of the application of the func over the container.</returns>
        </member>
        <member name="M:Eco.Core.Utils.ClientControllerExtensions.Remove(Eco.Core.Utils.IClientControlledContainer,Eco.Shared.Networking.INetObject,System.Object,System.Reflection.PropertyInfo)">
            <summary>An extension that allows ClientControlledContainers to be told to delete stuff by the client.</summary>
        </member>
        <member name="M:Eco.Core.Utils.ClientControllerExtensions.RemoveAt(Eco.Core.Utils.IClientControlledList,Eco.Shared.Networking.INetObject,System.Int32,System.Reflection.PropertyInfo)">
            <summary>An extension that allows ClientControlledContainers to be told to remove an index by the client.</summary>
        </member>
        <member name="T:Eco.Core.Utils.ISnapshotable">
            <summary>Interface which may be implemented by collection which supports snapshots of elements (this snapshot is safe to use in thread-safe environment).</summary>
        </member>
        <member name="T:Eco.Core.Utils.ISnapshotable`1">
            <summary>Interface which may be implemented by collection which supports snapshots of elements (this snapshot is safe to use in thread-safe environment).</summary>
        </member>
        <member name="T:Eco.Core.Utils.LazyResult">
            <summary>Simple struct for tracking a result that holds off generating a string till requested</summary>
        </member>
        <member name="P:Eco.Core.Utils.LazyResult.Success">
            <summary>Check if <see cref="T:Eco.Core.Utils.Result"/> is success.</summary>
        </member>
        <member name="M:Eco.Core.Utils.LazyResult.#ctor(Eco.Core.Utils.Result)">
            <summary>Constructs <see cref="T:Eco.Core.Utils.LazyResult"/> for stateless <see cref="T:Eco.Core.Utils.Result"/>. Best to be used with reusable cached result defined as static lass member. In that case it has zero-allocations even when resolved with <see cref="M:Eco.Core.Utils.LazyResult.Resolve"/>.</summary>
        </member>
        <member name="M:Eco.Core.Utils.LazyResult.#ctor(System.Boolean,System.Object,System.Func{System.Object,Eco.Core.Utils.Result})">
            <summary>Constructs <see cref="T:Eco.Core.Utils.LazyResult"/> for context aware <see cref="T:Eco.Core.Utils.Result"/>, usually when you need to build a message with link to some context object like a User, or Account, or Deed, or whatever. Ensure that <paramref name="success"/> is always in sync with generated result <see cref="P:Eco.Core.Utils.Result.Success"/>.</summary>
            <example><code>new LazyResult(false, user, user => Result.FailLoc($"Failed for {user.UILink()}"));</code></example>
        </member>
        <member name="M:Eco.Core.Utils.LazyResult.CreateResult">
            <summary>Creates new <see cref="T:Eco.Core.Utils.Result"/> from <see cref="T:Eco.Core.Utils.LazyResult"/>. Don't use it unless really necessary, prefer to use other functions on <see cref="T:Eco.Core.Utils.LazyResult"/> to check result state and it's message. You still may need this function if you need to pass the Result to another function and use it to merge another results into it.</summary>
        </member>
        <member name="M:Eco.Core.Utils.LazyResult.Resolve">
            <summary>Resolves the result if needed using Result generator. Otherwise just returns predefined/cached result.</summary>
        </member>
        <member name="M:Eco.Core.Utils.ServerListExtensions.RemoveAndLogErrors``1(System.Collections.Generic.IList{``0},System.String,System.Func{``0,System.Boolean})">
            <summary> This function is used to ensure correct state of lists. By default it will remove all null elements. It's usefull to not crash the game if there were some errors on saving/migrations. Anyway these errors needs to be investigated.  </summary>
        </member>
        <member name="T:Eco.Core.Utils.Logging.ClientLogEventTrigger">
            <summary>Implementation of <see cref="T:Eco.Shared.Utils.ILogWriter"/> that will trigger a log to an event, which is watched by the chatserver and sent 
            to the client.</summary>
        </member>
        <member name="T:Eco.Core.Utils.Logging.ConsoleLogWriter">
            <summary>Implementation of <see cref="T:Eco.Shared.Utils.ILogWriter"/> to show log messages in console.</summary>
        </member>
        <member name="T:Eco.Core.Utils.Logging.LogFileManager">
            <summary>Utility log manager for accessing information about logs stored in a directory.</summary>
        </member>
        <member name="F:Eco.Core.Utils.Logging.LogFileManager.LogDirectory">
            <summary>Represents the server's logging directory.</summary>
        </member>
        <member name="M:Eco.Core.Utils.Logging.LogFileManager.GetRelativeToLogFolder(System.String)">
            <summary>Creates relative path from an absolute log file path.</summary>
            <param name="path">Absolute path of a log file.</param>
            <returns>Relative path string of the log file.</returns>
        </member>
        <member name="M:Eco.Core.Utils.Logging.LogFileManager.GetRelativeToLogFolder(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc cref="M:Eco.Core.Utils.Logging.LogFileManager.GetRelativeToLogFolder(System.String)"/>
        </member>
        <member name="M:Eco.Core.Utils.Logging.LogFileManager.GetLogCategories(System.String,System.IO.SearchOption)">
            <summary>Returns all log category folder paths currently on the server.</summary>
            <param name="category">Root directory to search for category folders.</param>
            <param name="options"><seealso cref="T:System.IO.SearchOption"/> to use in the file search</param>
            <returns>Array containing all discovered category folders.</returns>
        </member>
        <member name="M:Eco.Core.Utils.Logging.LogFileManager.GetLogCategories(System.IO.SearchOption)">
            <inheritdoc cref="M:Eco.Core.Utils.Logging.LogFileManager.GetLogCategories(System.String,System.IO.SearchOption)"/>
        </member>
        <member name="M:Eco.Core.Utils.Logging.LogFileManager.GetLogFiles(System.String,System.IO.SearchOption)">
            <summary>Retrieves a list of all log files in a log folder/category.</summary>
            <param name="category">Category/folder to search. Leaving this as an empty string searches the entire log directory.</param>
            <param name="options"><seealso cref="T:System.IO.SearchOption"/> to use in the file search</param>
            <returns></returns>
        </member>
        <member name="M:Eco.Core.Utils.Logging.LogFileManager.GetLogFiles(System.IO.SearchOption)">
            <inheritdoc cref="M:Eco.Core.Utils.Logging.LogFileManager.GetLogFiles(System.String,System.IO.SearchOption)"/>
        </member>
        <member name="M:Eco.Core.Utils.Logging.LogFileManager.GetLogFilePath(System.String)">
            <summary>Retrieves the full path to a local log file using its relative path. This also performs sub path validation.</summary>
            <param name="path">Relative or absolute log file path to retrieve/validate.</param>
            <returns>Full string path to the log file.</returns>
        </member>
        <member name="M:Eco.Core.Utils.Logging.LogFileManager.ThrowIfNotSubPath(System.String)">
            <summary>Throws a new <seealso cref="T:System.ArgumentException"/> if the requested path is not a subdirectory of <seealso cref="F:Eco.Core.Utils.Logging.LogFileManager.LogDirectory"/></summary>
            <param name="root"></param>
        </member>
        <member name="T:Eco.Core.Utils.Logging.MulticastLogWriter">
            <summary>Implementation of <see cref="T:Eco.Shared.Utils.ILogWriter"/> allowing to write message to any number of different loggers.</summary>
        </member>
        <member name="T:Eco.Core.Utils.Logging.NLogManager">
            <summary>
            <see cref="T:Eco.Core.Utils.Logging.NLogManager"/> class provides high level API with pre-configured defaults for <see cref="T:Eco.Core.Utils.Logging.NLogWriter"/> creation.
            <see cref="T:Eco.Core.Utils.Logging.NLogWriter"/> is implementation of <see cref="T:Eco.Shared.Utils.ILogWriter"/> interface wrapping NLog library <see cref="T:NLog.Logger"/>.
            To get default logger you may use <see cref="M:Eco.Core.Utils.Logging.NLogManager.GetEcoLogWriter"/> and if you need separate log (i..e admin commands log, chat log etc) then you can use <see cref="M:Eco.Core.Utils.Logging.NLogManager.GetLogWriter(System.String)"/> with any valid file name.
            </summary>
        </member>
        <member name="M:Eco.Core.Utils.Logging.NLogManager.GetLogWriter(System.String)">
            <summary>Returns custom <see cref="T:Eco.Core.Utils.Logging.NLogWriter"/> outputting to Logs/{name}/ directory. If <paramref name="name"/> is "Eco" then it will return default logger which output files to Logs directory.</summary>
        </member>
        <member name="M:Eco.Core.Utils.Logging.NLogManager.GetEcoLogWriter">
            <summary>Returns default Eco log writer configured to produce log files in Logs directory and output same messages to console with <see cref="T:Eco.Core.Utils.Logging.ConsoleLogWriter"/>.</summary>
        </member>
        <member name="M:Eco.Core.Utils.Logging.NLogManager.ConfigureLogging">
            <summary>Configures default logging rules. If nlog.config file exists then default rules won't be created, but instead populated from the file.</summary>
        </member>
        <member name="M:Eco.Core.Utils.Logging.NLogManager.Flush">
            <summary>Synchronously flushes all pending disk changes.</summary>
        </member>
        <member name="M:Eco.Core.Utils.Logging.NLogManager.AddElasticTarget(NLog.Config.LoggingConfiguration)">
            <summary>Attempts to configure ElasticSearch logging if the required environment variables are present.</summary>
            <param name="config"><seealso cref="T:NLog.Config.LoggingConfiguration"/> instance to configure for ElasticSearch.</param>
        </member>
        <member name="M:Eco.Core.Utils.LongPaths.GetDirectoryName(System.String)">
            <summary> Returns the directory name of the <paramref name="path"/>. </summary>
        </member>
        <member name="T:Eco.Core.Utils.OptimizedActivator">
            <summary>
            https://rogerjohansson.blog/2008/02/28/linq-expressions-creating-objects/
            https://stackoverflow.com/a/16162475
            https://stackoverflow.com/questions/13041674/create-func-or-action-for-any-method-using-reflection-in-c
            Check above links for details.
            </summary>
        </member>
        <member name="M:Eco.Core.Utils.OptimizedActivator.BuildDelegate``1(System.Reflection.MethodInfo,System.Object[])">
            <summary>Builds compiled delegate of type <typeparamref name="T"/> (much faster than reflection) for call to <paramref name="method"/>. If <typeparamref name="T"/> has less arguments than method then <paramref name="missingParamValues"/> will be used or default values supplied.</summary>
        </member>
        <member name="M:Eco.Core.Utils.OptimizedActivator.ConvertDelegateParam(System.Linq.Expressions.ParameterExpression,System.Type)">
            <summary>Creates expression which converts <paramref name="delegateParam"/> to <paramref name="targetType"/>. There special case for <see cref="T:System.Collections.IEnumerable"/> when cast to <see cref="T:System.Collections.Generic.IEnumerable`1"/> </summary>
        </member>
        <member name="T:Eco.Core.Utils.PropertyScanning.BulkContextObject">
            <summary>
            Context object with cache, which could be used for example for bulk query data for all users instead of doing query per user. 
            It's useful to save data between evaluations of GameValue, so it will make first all calculations that are needed for all users, and then just return them from cache. 
            Especially useful in case of DB operations: it's too slow to make query per user, so if you can make bulk query with all users once, it will save a lot of time. 
            Implemented because of lag investigation at White Tiger server: it fixes not working civic ticks due to too slow database requests.    
            </summary>
        </member>
        <member name="T:Eco.Core.Utils.RecursiveSubscriptions">
            <summary>Helper object for implementing proper recursive subscriptions for the complex structures. For example, it is used in Election.cs for updating Description which includes information about different civics objects.</summary>
        </member>
        <member name="M:Eco.Core.Utils.RecursiveSubscriptions.SubscribeRecursive(Eco.Core.Controller.IController)">
            <summary>Subscribe for the controller recursively, so changes in the nested objects are tracked too. Remember subscriptions for this controller for the future Unsubscribe process.</summary>
        </member>
        <member name="M:Eco.Core.Utils.RecursiveSubscriptions.UnsubscribeRecursive(Eco.Core.Controller.IController)">
            <summary>Clear all subscriptions for the controller. We won't forget anything cause all subscriptions were properly stored.</summary>
        </member>
        <member name="M:Eco.Core.Utils.CoreReflectionUtils.IsReference(System.Reflection.MemberInfo,System.Int32)">
            <summary>Is the given thing a referene?  Return FALSE if it's a container, even if it contains references.</summary>
        </member>
        <member name="M:Eco.Core.Utils.CoreReflectionUtils.IsReferenceOrReferenceContainer(System.Reflection.MemberInfo,System.Int32)">
            <summary>Is the given thing a referene?  Return TRUE if it's a container that can contain references.</summary>
        </member>
        <member name="M:Eco.Core.Utils.CoreReflectionUtils.CreateDelegate(System.Reflection.MethodInfo,System.Object)">
            <summary>Given a method info, make a delegate that calls it on the given target. Handles methods with or without return values,
            as well as variable numbers of parameters.</summary>
        </member>
        <member name="M:Eco.Core.Utils.Result.IsFailed(Eco.Shared.Localization.LocString@)">
            <summary>
            Check if result failed and saves fail message into output parameter.
            </summary>
        </member>
        <member name="M:Eco.Core.Utils.Result.TapToIfNotSet(Eco.Core.Utils.Result@)">
            <summary>
            Taps this to another <paramref name="result"/> if <paramref name="result"/> has no value and returns this.
            Useful in workflow where you want to check multiple results sequentially and remember first result.
            </summary>
        </member>
        <member name="M:Eco.Core.Utils.RPCUtils.RPCFoldout(Eco.Shared.Localization.LocString,Eco.Core.Systems.IHasSerializableID,System.String)">
            <summary>RPC foldout is like a foldout list, but the contents are sent from the server, by the client calling the given RPC on the given view.</summary>
        </member>
        <member name="M:Eco.Core.Utils.RPCUtils.RPCFoldoutNeverSerialized(Eco.Shared.Localization.LocString,Eco.Core.Systems.IHasUniversalID,System.String)">
            <summary>An RPC foldout which the caller guarantees will never be serialized.  Allows us to create RPC calls to something with a transient ID.  This is useful in things like tooltip text
            where there's no change the text will be serialized.</summary>
        </member>
        <member name="T:Eco.Core.Utils.Streams.ConcatStream">
            <summary>Allow to concat two streams together. When the first stream fully read it will continue to read from the second stream.</summary>
        </member>
        <member name="T:Eco.Core.Utils.Streams.ReadOnlyForkStream">
            <summary>
            Read-only stream which "forks" data which was read to <see cref="F:Eco.Core.Utils.Streams.ReadOnlyForkStream.fork"/> stream.
            "Fork" means it will have copy of all data which was read from <see cref="T:System.IO.Stream"/>.
            It doesn't take ownership of <see cref="F:Eco.Core.Utils.Streams.ReadOnlyForkStream.fork"/> and you should Dispose it on you own.
            </summary>
        </member>
        <member name="T:Eco.Core.Utils.Streams.ReadOnlyStream">
            <summary>Base class for read-only stream wrappers.</summary>
        </member>
        <member name="T:Eco.Core.Utils.Streams.ReadOnlyWrapperStream">
            <summary>Base class for read-only stream wrappers.</summary>
        </member>
        <member name="T:Eco.Core.Utils.Streams.StreamWithLength">
            <summary>Adds Length and Position (get) support to Stream.</summary>
        </member>
        <member name="T:Eco.Core.Utils.Streams.WrapperStream">
            <summary>
            Can be used as base class for other stream wrappers.
            </summary>
        </member>
        <member name="M:Eco.Core.Utils.StringUtils.JoinSafe(Eco.Shared.Localization.LocString,System.Nullable{Eco.Shared.Localization.LocString},System.String,System.String)">
            <summary> Postfix will be added at the end of the <paramref name="other"/> if it is set. 
            For a demo see how AccountsChangeSet.DescribeChange wraps amount description with parenthesis. </summary>
        </member>
        <member name="M:Eco.Core.Utils.Threading.ActionUtils.AsAsyncAction(System.Action)">
            <summary> Represents <see cref="T:System.Action"/> as async action with immediate execution (invokes the <paramref name="action"/> and returns <see cref="P:System.Threading.Tasks.Task.CompletedTask"/>). </summary>
        </member>
        <member name="M:Eco.Core.Utils.Threading.ActionUtils.AsAsyncCancellableAction(System.Action)">
            <summary> Represents <see cref="T:System.Action"/> as async cancellable action with immediate execution (invokes the <paramref name="action"/> and returns <see cref="P:System.Threading.Tasks.Task.CompletedTask"/>). </summary>
        </member>
        <member name="T:Eco.Core.Utils.Threading.ActionWorker">
            <summary> Wraps asynchronous action to <see cref="T:Eco.Core.Utils.Threading.IWorker"/> interface. </summary>
        </member>
        <member name="M:Eco.Core.Utils.Threading.ActionWorker.DoWork(System.Threading.CancellationToken)">
            <inheritdoc cref="M:Eco.Core.Utils.Threading.WorkerBase.DoWork(System.Threading.CancellationToken)"/>
        </member>
        <member name="T:Eco.Core.Utils.Threading.EventDrivenWorker">
            <summary> Worker which controlled by <see cref="F:Eco.Core.Utils.Threading.EventDrivenWorker.autoResetEvent"/>. It will wait until <see cref="F:Eco.Core.Utils.Threading.EventDrivenWorker.autoResetEvent"/> set before every call to <see cref="M:Eco.Core.Utils.Threading.EventDrivenWorker.DoRepeatableWork(System.Threading.CancellationToken)"/>. </summary>
        </member>
        <member name="M:Eco.Core.Utils.Threading.EventDrivenWorker.#ctor(System.Action,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Eco.Core.Utils.Threading.EventDrivenWorker"/> class with infinite timeout between events.
            </summary>
        </member>
        <member name="M:Eco.Core.Utils.Threading.EventDrivenWorker.#ctor(System.Threading.AutoResetEvent,System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Eco.Core.Utils.Threading.EventDrivenWorker"/> class with infinite timeout between events.
            <paramref name="autoResetEvent"/> should be set for initial <paramref name="doWork"/> execution on <see cref="M:Eco.Core.Utils.Threading.WorkerBase.Start"/>.
            </summary>
        </member>
        <member name="M:Eco.Core.Utils.Threading.EventDrivenWorker.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Int32}},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Eco.Core.Utils.Threading.EventDrivenWorker"/> class with infinite timeout between events.
            </summary>
        </member>
        <member name="M:Eco.Core.Utils.Threading.EventDrivenWorker.#ctor(System.Threading.AutoResetEvent,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Int32}})">
            <summary>
            Initializes a new instance of the <see cref="T:Eco.Core.Utils.Threading.EventDrivenWorker"/> class with infinite timeout between events.
            <paramref name="autoResetEvent"/> should be set for initial <paramref name="repeatableAction"/> execution on <see cref="M:Eco.Core.Utils.Threading.WorkerBase.Start"/>.
            </summary>
        </member>
        <member name="M:Eco.Core.Utils.Threading.EventDrivenWorker.#ctor(System.Func{System.Int32},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Eco.Core.Utils.Threading.EventDrivenWorker"/> class with timeout between events defined by return value of <paramref name="repeatableAction"/> function in milliseconds.
            </summary>
        </member>
        <member name="M:Eco.Core.Utils.Threading.EventDrivenWorker.#ctor(System.Threading.AutoResetEvent,System.Func{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Eco.Core.Utils.Threading.EventDrivenWorker"/> class with timeout between events defined by return value of <paramref name="repeatableAction"/> function in milliseconds.
            <paramref name="autoResetEvent"/> should be set for initial <paramref name="repeatableAction"/> execution on <see cref="M:Eco.Core.Utils.Threading.WorkerBase.Start"/>.
            </summary>
        </member>
        <member name="M:Eco.Core.Utils.Threading.EventDrivenWorker.DoRepeatableWork(System.Threading.CancellationToken)">
            <inheritdoc cref="M:Eco.Core.Utils.Threading.RepeatableWorkerBase.DoRepeatableWork(System.Threading.CancellationToken)"/>
        </member>
        <member name="T:Eco.Core.Utils.Threading.IntervalActionWorker">
            <summary> Executes an action with specific interval (it will adjust delay between executions based on the action execution time). </summary>
        </member>
        <member name="P:Eco.Core.Utils.Threading.IntervalActionWorker.Interval">
            <summary> Interval between <see cref="P:Eco.Core.Utils.Threading.RepeatableActionWorker.RepeatableAction"/> executions. </summary>
        </member>
        <member name="M:Eco.Core.Utils.Threading.IntervalActionWorker.DoRepeatableWork(System.Threading.CancellationToken)">
            <inheritdoc cref="M:Eco.Core.Utils.Threading.RepeatableActionWorker.DoRepeatableWork(System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Eco.Core.Utils.Threading.PeriodicWorkerFactory.Create(System.TimeSpan,System.Action)">
            <summary>Creates a new instance of the <see cref="T:Eco.Core.Utils.Threading.RepeatableActionWorker"/> class with specified delay between executions.</summary>
        </member>
        <member name="M:Eco.Core.Utils.Threading.PeriodicWorkerFactory.CreateWithInterval(System.TimeSpan,System.Action)">
            <summary>Creates a new instance of the <see cref="T:Eco.Core.Utils.Threading.RepeatableActionWorker"/> class with specified execution interval.</summary>
        </member>
        <member name="M:Eco.Core.Utils.Threading.PeriodicWorkerFactory.CreateWithInterval(System.TimeSpan,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>Creates a new instance of the <see cref="T:Eco.Core.Utils.Threading.RepeatableActionWorker"/> class from async action with specified execution interval.</summary>
        </member>
        <member name="M:Eco.Core.Utils.Threading.PeriodicWorkerFactory.Create(System.TimeSpan,System.Action{System.Threading.CancellationToken})">
            <summary>Creates a new instance of the <see cref="T:Eco.Core.Utils.Threading.RepeatableActionWorker"/> class with specified interval between executions with cancellation support.</summary>
        </member>
        <member name="M:Eco.Core.Utils.Threading.PeriodicWorkerFactory.Create(System.Func{System.TimeSpan})">
            <summary>Creates a new instance of the <see cref="T:Eco.Core.Utils.Threading.PeriodicWorkerFactory"/> class from function which returns delay before next work.</summary>
        </member>
        <member name="M:Eco.Core.Utils.Threading.PeriodicWorkerFactory.Create(System.Func{System.Threading.Tasks.Task{System.TimeSpan}})">
            <summary>Creates a new instance of the <see cref="T:Eco.Core.Utils.Threading.PeriodicWorkerFactory"/> class from function which returns delay before next work.</summary>
        </member>
        <member name="T:Eco.Core.Utils.Threading.RepeatableActionWorker">
            <summary> Performs repeatable async action until cancelled. </summary>
        </member>
        <member name="M:Eco.Core.Utils.Threading.RepeatableActionWorker.DoRepeatableWork(System.Threading.CancellationToken)">
            <inheritdoc cref="M:Eco.Core.Utils.Threading.RepeatableWorkerBase.DoRepeatableWork(System.Threading.CancellationToken)"/>
        </member>
        <member name="T:Eco.Core.Utils.Threading.RepeatableWorkerBase">
            <summary> Base class for workers which implements default repeatable Worker workflow. </summary>
        </member>
        <member name="M:Eco.Core.Utils.Threading.RepeatableWorkerBase.DoRepeatableWork(System.Threading.CancellationToken)">
            <summary> Performs repeatable work, may be cancelled with <paramref name="token"/>. </summary>
        </member>
        <member name="M:Eco.Core.Utils.Threading.RepeatableWorkerBase.DoWork(System.Threading.CancellationToken)">
            <summary> Main work loop which repeats <see cref="M:Eco.Core.Utils.Threading.RepeatableWorkerBase.DoRepeatableWork(System.Threading.CancellationToken)"/> until cancelled. </summary>
        </member>
        <member name="T:Eco.Core.Utils.Threading.WorkerBase">
            <summary> Base class for workers which implements default Worker workflow. </summary>
        </member>
        <member name="M:Eco.Core.Utils.Threading.WorkerBase.DoWork(System.Threading.CancellationToken)">
            <summary> Actual work performed in this method. </summary>
        </member>
        <member name="M:Eco.Core.Utils.Threading.WorkerBase.Start">
            <summary> Starts worker with default <see cref="T:System.Threading.Tasks.TaskFactory`1"/>. </summary>
        </member>
        <member name="M:Eco.Core.Utils.Threading.WorkerBase.Start(System.Threading.Tasks.TaskFactory)">
            <summary> Starts worker with <paramref name="taskFactory"/> <see cref="T:System.Threading.Tasks.TaskFactory`1"/>. </summary>
        </member>
        <member name="M:Eco.Core.Utils.Threading.WorkerBase.ShutdownAsync">
            <summary> Shutdowns worker by setting cancellation token <see cref="F:Eco.Core.Utils.Threading.WorkerBase.cts"/> and waiting for <see cref="F:Eco.Core.Utils.Threading.WorkerBase.task"/> to be completed. </summary>
        </member>
        <member name="M:Eco.Core.Utils.ThreadSafeActions.UpdateSubject``2(``0@,``0,System.Func{``0,Eco.Core.Utils.ThreadSafeActionBase{``1}},``1)">
            <summary>
            Updates <see cref="T:Eco.Core.Utils.ThreadSafeActionBase`1"/> subject (action emitter). It is thread-safe and ensures old subscription removed from <paramref name="subject"/> even in concurrent environment.
            It possible though that both <paramref name="newSubject"/> and <paramref name="subject"/> subscribed. it is very rare case, but you should aware of it.
            It happens if action removed from old subject, but subject changed in another thread after this, before new subject assigned (it will be removed anyway because of interlocked change, but it may exists for short period of time).
            </summary>
        </member>
        <member name="M:Eco.Core.Utils.ThreadSafeActions.UpdateSubject``2(``0@,``0,System.Action{``0,``1},System.Action{``0,``1},``1)">
            <summary>
            Updates subject (action emitter). It uses addAction and removeAction operations for adding action to new subject and removing from the old.
            It is thread-safe and ensures old subscription removed from <paramref name="subject"/> even in concurrent environment.
            It possible though that both <paramref name="newSubject"/> and <paramref name="subject"/> subscribed for short period of time. It is very rare case, but you should aware of it.
            It happens if action removed from old subject, but subject changed in another thread after this, before new subject assigned (it will be removed anyway because of interlocked change, but it may exists for short period of time).
            </summary>
        </member>
        <member name="M:Eco.Core.Utils.ThreadSafeBidirectionalMap`2.GetOrAdd(`0,System.Func{`1})">
            <summary>
            Thread-safe implementation of GetOrAdd pattern with <paramref name="valueFactory"/>.
            Please be aware that <paramref name="valueFactory"/> may be called even when value not inserted, because of nature of lock-free algorithms.
            </summary>
        </member>
        <member name="M:Eco.Core.Utils.ThreadSafeBidirectionalMap`2.GetOrAdd(`0,`1)">
            <summary>Thread-safe implementation of GetOrAdd pattern.</summary>
        </member>
        <member name="M:Eco.Core.Utils.ThreadSafeDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>Removes <paramref name="item"/> from dictionary if it matches both key and value of <paramref name="item"/>.</summary>
        </member>
        <member name="M:Eco.Core.Utils.ThreadSafeHashSet`1.RemoveAll(System.Func{`0,System.Boolean})">
            <summary> Removes all items matching <paramref name="match"/> predicate and returns count of removed items. </summary>
        </member>
        <member name="T:Eco.Core.Utils.ThreadSafeLimitedHistory`1">
            <summary>
            Limited size history which automatically ejects old elements when more than N elements added.
            New elements added to top of the history (as most recent) and will be returned first while enumeration.
            Elements can't be directly removed from history one by one, but you can <see cref="M:Eco.Core.Utils.ThreadSafeLimitedHistory`1.Clear"/> whole history.
            </summary>
        </member>
        <member name="M:Eco.Core.Utils.ThreadSafeLimitedHistory`1.Add(`0)">
            <summary>Adds new <paramref name="element"/> and ejects any elements which is behind <see cref="F:Eco.Core.Utils.ThreadSafeLimitedHistory`1.size"/>.</summary>
        </member>
        <member name="M:Eco.Core.Utils.ThreadSafeLimitedHistory`1.GetEnumerator">
            <summary>Returns elements in order they was added. If you need to get most recent elements first then you need to use Reverse function.</summary>
        </member>
        <member name="M:Eco.Core.Utils.ThreadSafeList`1.ToArray">
            <summary> Makes atomic ToArray operation. It isn't safe to use <see cref="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})"/>, because it gets <see cref="P:Eco.Core.Utils.ThreadSafeList`1.Count"/> as a separate operation (and count may be modified in between). </summary>
        </member>
        <member name="M:Eco.Core.Utils.ThreadSafeList`1.ToList">
            <summary> Makes atomic ToList operation. It isn't safe to use <see cref="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})"/>, because it gets <see cref="P:Eco.Core.Utils.ThreadSafeList`1.Count"/> as a separate operation (and count may be modified in between). </summary>
        </member>
        <member name="M:Eco.Core.Utils.ThreadSafeList`1.RemoveAt(System.Int32)">
            <summary>Removes an element but doesnt return it (needed for implementing IList).</summary>
        </member>
        <member name="M:Eco.Core.Utils.ThreadSafeList`1.RemoveAtAndReturn(System.Int32)">
            <summary>Remove the indexed element atomically and return it.</summary>
        </member>
        <member name="M:Eco.Core.Utils.ThreadSafeList`1.AddOrReplace(`0,System.Predicate{`0})">
            <summary>Replaces first element matching the <paramref name="matcher"/> with <paramref name="item"/> or adds new <paramref name="item"/> if no one matched.</summary>
        </member>
        <member name="M:Eco.Core.Utils.ThreadSafeList`1.RemoveFirst(System.Predicate{`0})">
            <summary>Removes first item matching the <paramref name="matcher"/>. Returns <c>true</c> if item was removed.</summary>
        </member>
        <member name="M:Eco.Core.Utils.ThreadSafeList`1.RemoveAll(System.Predicate{`0},System.Collections.Immutable.ImmutableList{`0}@)">
            <summary>
            Removes all elements by <paramref name="match"/> and returns <paramref name="removed"/> elements in output parameter.
            This operation is atomic and ensures that all returned elements belonging to this remove operation.
            In example if you do something like
            <code>var l = items.ToList(); /* items may be added or removed */ items.RemoveAll(predicate); /* items may be added or removed */ var removed = l.Except(items);</code>
            then you may have inconsistent results where in `removed` will be items which was added since call to `RemoveAll` or removed since call to `ToList` and may match the predicate
            or you may miss some removed items if they added after call to ToList or added back to items since call to RemoveAll.
            </summary>
        </member>
        <member name="M:Eco.Core.Utils.ThreadSafeList`1.WithSnapshot``1(System.Func{System.Collections.Generic.IReadOnlyList{`0},``0})">
            <summary>
            Allows to execute action with immutable list for thread-safe calculations
            I.e. you may want to get Count first and then make some calculations based on number of elements.
            For separate Count and GetEnumerator operations you may have state changed between these two calls.
            </summary>
            <param name="action">Function to execute with read-only list.</param>
            <typeparam name="TResult">Result of function applied to immutable list.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Eco.Core.Utils.ThreadSafeList`1.WithSnapshot(System.Action{System.Collections.Generic.IReadOnlyList{`0}})">
            <summary>
            Same as <see cref="M:Eco.Core.Utils.ThreadSafeList`1.WithSnapshot``1(System.Func{System.Collections.Generic.IReadOnlyList{`0},``0})"/> but for action.
            </summary>
            <param name="action">Action to execute with read-only list.</param>
        </member>
        <member name="P:Eco.Core.Utils.ThreadSafeList`1.Snapshot">
            <summary>
            Gets current list read-only snapshot. May be used to get consistent result between different access calls.
            </summary>
        </member>
        <member name="T:Eco.Core.Utils.ThreadSafeQueue`1">
            <summary>
            Only use this collection when absolutely necessary when you can't use <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/> instead.
            It known to have very bad performance and memory usage for often updated big collections, because all new elements added to stack which then reversed when you need to dequeue element.
            </summary>
        </member>
        <member name="M:Eco.Core.Utils.ThreadSafeQueue`1.TryDequeue(System.Func{`0,System.Boolean},`0@)">
            <summary>
            Tries to dequeue item from the <see cref="T:Eco.Core.Utils.ThreadSafeQueue`1"/> if it is matching <paramref name="predicate"/>.
            It is atomic thread-safe alternative of sequence <code>if (!queue.IsEmpty &amp;&amp; predicate(queue.Peek())) value = queue.Dequeue();</code>
            </summary>
        </member>
        <member name="M:Eco.Core.Utils.TimedTask.ReportProgress(System.String)">
            <summary> Write the progress to the console, needs to be called inside ConsoleSynchronizationContext. </summary>
        </member>
        <member name="T:Eco.Core.Utils.IContainsDynamicFlags">
            <summary> Properties with [DynamicFlags] attribute will result client side's selector to try to look for this container in their parent.
            If there is an entry with the same name, then selector will use contained flags instead of the default ones.
            Nothing will be replaced if there is no such entry.
            For a demo see how wages declare their WagesPaidFromAccount and how AppointedTitle clears its GovernmentAccess flag. </summary>
        </member>
        <member name="M:Eco.Core.Utils.ViewExtensions.SetFlags(Eco.Core.Utils.IContainsDynamicFlags,System.String,Eco.Shared.View.ViewSelectorFlags)">
            <summary> Sets view selector flags for the property in the container. 
            For a demo see how ElectedTitle sets GovernmentAccess flag for its wages source account. </summary>
        </member>
        <member name="T:Eco.Core.Utils.WeakKeyConcurrentDictionary`2">
            <summary>
            Concurrent dictionary which uses weak references for key values. This way you may add mapping without care key referenced object will never be released.
            You need eventually call <see cref="M:Eco.Core.Utils.WeakKeyConcurrentDictionary`2.Cleanup"/> to ensure entries with dead references removed.
            </summary>
        </member>
        <member name="M:Eco.Core.Utils.WeakKeyConcurrentDictionary`2.TryGetValue(`0,`1@)">
            <inheritdoc cref="M:System.Collections.Concurrent.ConcurrentDictionary`2.TryGetValue(`0,`1@)"/>
        </member>
        <member name="M:Eco.Core.Utils.WeakKeyConcurrentDictionary`2.TryRemove(`0,`1@)">
            <inheritdoc cref="M:System.Collections.Concurrent.ConcurrentDictionary`2.TryRemove(`0,`1@)"/>
        </member>
        <member name="M:Eco.Core.Utils.WeakKeyConcurrentDictionary`2.Clear">
            <summary>Removes all entries no matter if alive or not.</summary>
        </member>
        <member name="M:Eco.Core.Utils.WeakKeyConcurrentDictionary`2.Cleanup">
            <summary>Removes all "dead" key entries.</summary>
        </member>
        <member name="T:Eco.Core.Utils.WeakKeyConcurrentDictionary`2.WeakReferenceKey">
            <summary>Private <c>TKey</c> wrapper which only holds weak reference, but inherits <see cref="M:Eco.Core.Utils.WeakKeyConcurrentDictionary`2.WeakReferenceKey.GetHashCode"/> and <see cref="M:Eco.Core.Utils.WeakKeyConcurrentDictionary`2.WeakReferenceKey.Equals(System.Object)"/> from wrapped object.</summary>
        </member>
        <member name="M:Eco.Core.Utils.WeakKeyConcurrentDictionary`2.WeakReferenceKey.TryGetTarget(`0@)">
            <summary>Tries to obtain <paramref name="target"/> value (if not yet garbage collected).</summary>
        </member>
        <member name="M:Eco.Core.Utils.WeakKeyConcurrentDictionary`2.WeakReferenceKey.Equals(System.Object)">
            <summary>Equality which works both with <see cref="T:Eco.Core.Utils.WeakKeyConcurrentDictionary`2.WeakReferenceKey"/> and referenced object.</summary>
        </member>
        <member name="M:Eco.Core.Utils.WeakKeyConcurrentDictionary`2.WeakReferenceKey.GetHashCode">
            <summary>Shared hash code with referenced object.</summary>
        </member>
        <member name="T:Eco.Core.Plugins.DisplayTab">
            <summary>Simple implementation of <see cref="T:Eco.Core.Plugins.Interfaces.IDisplayTab"/> interface which may be used as POCO for <see cref="P:Eco.Core.Plugins.Interfaces.IHasDisplayTabs.DisplayTabs"/>.</summary>
        </member>
        <member name="M:Eco.Core.Plugins.DisplayTab.GetDisplayTitle">
            <inheritdoc cref="M:Eco.Core.Plugins.Interfaces.IDisplayTab.GetDisplayTitle"/>
        </member>
        <member name="M:Eco.Core.Plugins.DisplayTab.GetDisplayText">
            <inheritdoc cref="M:Eco.Core.Plugins.Interfaces.IDisplayTab.GetDisplayText"/>
        </member>
        <member name="T:Eco.Core.Plugins.Interfaces.ICommandablePlugin">
            <summary>
            Displays menu item for the plugin.
            </summary>
        </member>
        <member name="T:Eco.Core.Plugins.Interfaces.ICustomUIPlugin">
            <summary>
            Interface for a plugin to show a custom UI tab.
            </summary>
        </member>
        <member name="M:Eco.Core.Plugins.Interfaces.ICustomUIPlugin.GetCustomUIControl">
            <summary>
            Return a Control that will be displayed in the tab. If the plugin is also a ITabPage it will get tab page enter/leave events.
            </summary>
            <returns>A Control</returns>
        </member>
        <member name="M:Eco.Core.Plugins.Interfaces.ICustomUIPlugin.GetCustomUIName">
            <summary>
            The name of the tab.
            </summary>
        </member>
        <member name="T:Eco.Core.Plugins.Interfaces.IDisplayTab">
            <summary>Interface for Display tabs with methods returning title and content. It also has callback handler called when tab visibility changes (i.e. if you want to avoid expensive calculation when tab is invisible).</summary>
        </member>
        <member name="M:Eco.Core.Plugins.Interfaces.IDisplayTab.OnDisplayTabVisibilityChange(System.Boolean)">
            <summary>Callback to be called when tab become visible or hidden.</summary>
        </member>
        <member name="M:Eco.Core.Plugins.Interfaces.IDisplayTab.GetDisplayTitle">
            <summary>Returns title which will be used as UI tab title.</summary>
        </member>
        <member name="M:Eco.Core.Plugins.Interfaces.IDisplayTab.GetDisplayText">
            <summary>Returns current content of UI tab.</summary>
        </member>
        <member name="T:Eco.Core.Plugins.Interfaces.IHasDisplayTabs">
            <summary>
            Interface which may be used by plugins which provides generates custom display text.
            Plugin should return enumerable of <see cref="T:Eco.Core.Plugins.Interfaces.IDisplayTab"/> objects each of which represents a display tab.
            </summary>
        </member>
        <member name="M:Eco.Core.Plugins.Interfaces.IInitializablePlugin.Initialize(Eco.Core.Utils.TimedTask)">
            <summary>Called by the <seealso cref="T:Eco.Core.PluginManager"/> to initialize the <seealso cref="T:Eco.Core.Plugins.Interfaces.IServerPlugin"/> instance.</summary>>
        </member>
        <member name="T:Eco.Core.Plugins.Interfaces.IServerPlugin">
            <summary>Base interface for all server plugins.</summary>
        </member>
        <member name="M:Eco.Core.Plugins.Interfaces.IServerPlugin.GetStatus">
            <summary>Returns the current status string for displaying in the Server's console.</summary>
        </member>
        <member name="M:Eco.Core.Plugins.Interfaces.IPluginManager.FireShutdown(System.Int32)">
            <summary>
            Initiates shutdown procedure, but doesn't wait until it complete. It doesn't terminate code execution and so instruction after this call will be executed as usual.
            Optional <paramref name="exitCode"/> contains application exit code.
            </summary>
        </member>
        <member name="T:Eco.Core.Plugins.Interfaces.ITabPage">
            <summary>
            Interface for a plugin to be notified if the user enters or leaves their ICustomUIPlugin tab.
            </summary>
        </member>
        <member name="M:Eco.Core.Plugins.Interfaces.IWorkerPlugin.DoWork(System.Threading.CancellationToken)">
            <summary>
            Performs one unit of work. There no delay between <see cref="M:Eco.Core.Plugins.Interfaces.IWorkerPlugin.DoWork(System.Threading.CancellationToken)"/> calls, it works pretty much like one iteration of loop.
            Usually you need to maintain delay between calls with <see cref="M:System.Threading.Tasks.Task.Delay(System.Int32)"/> or <see cref="M:Eco.Core.Utils.Async.SingleObjectWaiter.WaitAsync(System.Threading.WaitHandle,System.Int64,System.Threading.CancellationToken)"/> or other async wait methods to only perform work as often as required.
            Try to avoid idle loops and do work only when required. In some cases it may be preferred to use <see cref="T:Eco.Core.Utils.Threading.PeriodicWorkerFactory"/> instead for more flexible worker creation.
            Work may be interrupted between <see cref="M:Eco.Core.Plugins.Interfaces.IWorkerPlugin.DoWork(System.Threading.CancellationToken)"/> calls or provided <paramref name="token"/> can be used to check if work should be cancelled within <see cref="M:Eco.Core.Plugins.Interfaces.IWorkerPlugin.DoWork(System.Threading.CancellationToken)"/>.
            </summary>
            <param name="token">cancellation token.</param>
        </member>
        <member name="M:Eco.Core.Plugins.PluginConfig`1.SaveAsync">
            <summary> Saves config file asynchronously. Safe for Wait() from UI thread. </summary>
        </member>
        <member name="M:Eco.Core.Plugins.PluginConfig`1.SaveAsAsync(System.String)">
            <summary> Saves config file asynchronously to specific filename. Safe for Wait() from UI thread. </summary>
        </member>
        <member name="M:Eco.Core.Plugins.PluginConfig`1.ResetAsync">
            <summary> Resets config to default. </summary>
        </member>
        <member name="T:Eco.Core.Plugins.PluginPriorities">
            <summary>This determines the initialization order of plugins.</summary>
        </member>
        <member name="T:Eco.Core.Plugins.PluginTickTimerBase">
            <summary>Base class for all <see cref="T:Eco.Core.Plugins.PluginTickTimer"/> implementations.</summary>
        </member>
        <member name="P:Eco.Core.Plugins.PluginTickTimerBase.PluginName">
            <summary>The name of the plugin we are currently monitoring.</summary>
        </member>
        <member name="M:Eco.Core.Plugins.PluginTickTimerBase.StoreTickMetric(System.Double,System.Double)">
            <summary>Posts our metrics to ElasticSearch under our configured plugin name.</summary>
            <param name="averageTime">The total average time of the tick.</param>
            <param name="totalTime">The total tick time.</param>
        </member>
        <member name="T:Eco.Core.Plugins.PluginTickTimer`1">
            <summary>Typedef variant of the <seealso cref="T:Eco.Core.Plugins.PluginTickTimer"/> class for monitoring and collecting tick averages.</summary>
            <typeparam name="T">Plugin type to monitor</typeparam>
            <inheritdoc/>
        </member>
        <member name="T:Eco.Core.Plugins.PluginTickTimer">
            <summary>Generic tick timer for collecting and storing average tick metrics.</summary>
            <inheritdoc/>
        </member>
        <member name="M:Eco.Core.Plugins.StorageManager.LoadSaveAsync(System.Boolean)">
            <summary>Loads save from <see cref="P:Eco.Core.Plugins.StorageManager.SaveName"/>. If flag <paramref name="restoreBackupIfSaveMissing"/> is set then it will use backup for the <see cref="P:Eco.Core.Plugins.StorageManager.SaveName"/> if no save file exists.</summary>
        </member>
        <member name="M:Eco.Core.Plugins.StorageManager.PersistAsync">
            <summary> Persists all pending storages asynchronously. </summary>
        </member>
        <member name="M:Eco.Core.Plugins.StorageManager.InitializeAsync(System.Boolean)">
            <summary>Initializes <see cref="T:Eco.Core.Plugins.StorageManager"/>. May optionally disable backups if <paramref name="enableBackups"/> set to <c>false</c>.</summary>
        </member>
        <member name="T:Eco.Core.LocalizationAssemblyParser">
            Extract server assembly localization strings. From Attributes:
            <see cref="T:Eco.Shared.Networking.EcoAttribute"/>
            <see cref="T:Eco.Shared.Localization.LocalizedAttribute"/>
            <see cref="F:Eco.Core.LocalizationAssemblyParser.chatCommandAttrType"/>
        </member>
        <member name="T:Eco.Core.Serialization.Converters.UniversalDateTimeConverter">
            <summary>
            Reads <see cref="T:System.DateTime"/> either with <see cref="T:Newtonsoft.Json.Converters.JavaScriptDateTimeConverter"/> or with <see cref="T:Newtonsoft.Json.Converters.IsoDateTimeConverter"/>, but always serializes as <see cref="T:Newtonsoft.Json.Converters.IsoDateTimeConverter"/>.
            Required for transition between old JSON incompatible date serialization format and new ISO JSON compatible format. It will work with old configs, but new configs will be produced in valid format.
            </summary>
        </member>
        <member name="T:Eco.Core.Serialization.DataBlob">
            <summary> Contains named raw data for <see cref="T:Eco.Core.Serialization.DataStore"/>. </summary>
        </member>
        <member name="P:Eco.Core.Serialization.DataBlob.Name">
            <summary> Entry name. </summary>
        </member>
        <member name="P:Eco.Core.Serialization.DataBlob.Data">
            <summary> Raw data. </summary>
        </member>
        <member name="T:Eco.Core.Serialization.DataStoreContentAccessorDelegate">
            <summary> Delegate for <see cref="M:Eco.Core.Serialization.DataStore.ContentAccessor.ExecuteAsync(Eco.Core.Serialization.DataStore.ExclusiveAccess,Eco.Core.Serialization.DataStoreContentAccessorDelegate)"/>. </summary>
        </member>
        <member name="T:Eco.Core.Serialization.DataStore.ContentAccessor">
            <summary> <see cref="T:Eco.Core.Serialization.DataStore"/> content accessor which allows to perform safe <see cref="T:Eco.Core.Serialization.DataStore"/> modifications by other classes. </summary>
        </member>
        <member name="M:Eco.Core.Serialization.DataStore.ContentAccessor.UpdateEntry(System.String,Ionic.Zip.WriteDelegate)">
            <summary>Updates entry with <paramref name="name"/> with content written by <paramref name="writeDelegate"/>. Aware that <paramref name="writeDelegate"/> may be called multiple times!</summary>
        </member>
        <member name="M:Eco.Core.Serialization.DataStore.ContentAccessor.DeleteEntry(System.String)">
            <summary> Deletes entry with given <paramref name="name"/> in <see cref="T:Eco.Core.Serialization.DataStore"/>. </summary>
        </member>
        <member name="M:Eco.Core.Serialization.DataStore.DeleteEntry(System.String)">
            <summary> Deletes zip entry with given <paramref name="name"/>. </summary>
        </member>
        <member name="M:Eco.Core.Serialization.DataStore.UpdateEntry(System.String,Ionic.Zip.WriteDelegate)">
            <summary> Opens existing or creates new zip entry with specified <paramref name="name"/>. </summary>
        </member>
        <member name="T:Eco.Core.Serialization.DataStore.ExclusiveAccess">
            <summary>
            Class which should be used for exclusive access to <see cref="F:Eco.Core.Serialization.DataStore.ExclusiveAccess.DataStore"/>.
            May be obtained with <see cref="M:Eco.Core.Serialization.DataStore.WaitExclusiveAccess"/> or <see cref="M:Eco.Core.Serialization.DataStore.WaitExclusiveAccessAsync"/> to get it with exclusive access.
            You can also create with <see cref="M:Eco.Core.Serialization.DataStore.ExclusiveAccess.#ctor(Eco.Core.Serialization.DataStore)"/> constructor (no obtained state) and then <see cref="M:Eco.Core.Serialization.DataStore.ExclusiveAccess.Wait(System.Threading.CancellationToken)"/> or <see cref="M:Eco.Core.Serialization.DataStore.ExclusiveAccess.WaitAsync(System.Threading.CancellationToken)"/>.
            </summary>
        </member>
        <member name="M:Eco.Core.Serialization.DataStore.ExclusiveAccess.PurgeAsync(System.String)">
            <inheritdoc cref="M:Eco.Core.Serialization.DataStore.PurgeAsync(Eco.Core.Serialization.DataStore.ExclusiveAccess,System.String)"/>
        </member>
        <member name="M:Eco.Core.Serialization.DataStore.InitEntryDictionaries">
            <summary>Init entry dictionaries with reflection, because default <see cref="M:Ionic.Zip.ZipFile.RemoveEntry(Ionic.Zip.ZipEntry)"/> is very very slow for archives with big number of files. It also doesn't allow to remove entries with Windows paths.</summary>
        </member>
        <member name="M:Eco.Core.Serialization.DataStore.RemoveEntryFromDictionaries(System.String)">
            <summary>Directly removes entry from <see cref="T:Ionic.Zip.ZipFile"/> entry dictionaries. Used for optimization purposes and in cases where it isn't possible to remove entry because of path normalization (like Windows path).</summary>
        </member>
        <member name="M:Eco.Core.Serialization.DataStore.FixWindowsPaths">
            <summary>There known issue with DotNetZip which causes to duplicate zip entries if they uses \ symbol as separator. It isn't possible to fix with API, so we are using reflection here for direct collections modification.</summary>
        </member>
        <member name="M:Eco.Core.Serialization.DataStore.Flush">
            <summary>Flushes changes to disk if any updates and enough time since last save.</summary>
        </member>
        <member name="M:Eco.Core.Serialization.DataStore.FolderExists(System.String)">
            <summary> Checks if non-empty <paramref name="folder"/> exists in the zip archive. </summary>
        </member>
        <member name="M:Eco.Core.Serialization.DataStore.GetFileNames(System.String)">
            <summary> Returns file names in zip archive's <paramref name="folder"/>. </summary>
        </member>
        <member name="M:Eco.Core.Serialization.DataStore.GetFileEntriesInFolder(System.String)">
            <summary> Returns all <see cref="T:System.IO.Compression.ZipArchiveEntry"/> for files in the <paramref name="folder"/>. </summary>
        </member>
        <member name="M:Eco.Core.Serialization.DataStore.WriteAsync(System.String,System.String)">
            <summary>Writes <paramref name="content"/> to the entry with name <paramref name="fileName"/>.</summary>
        </member>
        <member name="T:Eco.Core.Serialization.Internal.IObjectReference">
            <summary>Used during deserialization for object references for late resolving (i.e. from <see cref="T:Eco.Core.Systems.IRegistrar"/>.</summary>
        </member>
        <member name="M:Eco.Core.Serialization.Internal.IObjectReference.GetReferencedObject">
            <summary>Gets referenced object. Usually only available when all object deserialized and fixups may be applied.</summary>
        </member>
        <member name="M:Eco.Core.Serialization.Internal.IObjectReference.TryGetReferencedObject(System.Object@)">
            <summary>Tries to get referenced object. Returns <c>false</c> if that not possible.</summary>
        </member>
        <member name="T:Eco.Core.Serialization.Internal.IObjectReferenceService">
            <summary>Service used by serializers for different reference types (like <see cref="T:Eco.Core.Systems.IHasID"/> or <see cref="T:Eco.Core.Systems.IHasReferenceableSerializableID"/>).</summary>
        </member>
        <member name="M:Eco.Core.Serialization.Internal.IObjectReferenceService.GetId(System.Object)">
            <summary>Returns identifier for <paramref name="instance"/>.</summary>
        </member>
        <member name="M:Eco.Core.Serialization.Internal.IObjectReferenceService.MakeReference(System.Type,System.Int32)">
            <summary>Makes <see cref="T:Eco.Core.Serialization.Internal.IObjectReference"/> for <paramref name="type"/> and <paramref name="id"/>.</summary>
        </member>
        <member name="T:Eco.Core.Serialization.Internal.RegistrarObjectReference">
            <summary><see cref="T:Eco.Core.Systems.IRegistrar"/> object reference resolved by <see cref="F:Eco.Core.Serialization.Internal.RegistrarObjectReference.Type"/> and <see cref="F:Eco.Core.Serialization.Internal.RegistrarObjectReference.Id"/>.</summary>
            <inheritdoc cref="T:Eco.Core.Serialization.Internal.IObjectReference"/>
        </member>
        <member name="T:Eco.Core.Serialization.Internal.RegistrarObjectReferenceService">
            <summary><see cref="T:Eco.Core.Serialization.Internal.IObjectReferenceService"/> for <see cref="T:Eco.Core.Systems.IRegistrar"/> objects.</summary>
            <inheritdoc cref="T:Eco.Core.Serialization.Internal.IObjectReferenceService"/>
        </member>
        <member name="T:Eco.Core.Serialization.Internal.UniversalIdReference">
            <summary>Reference to <see cref="T:Eco.Core.Systems.UniversalIDs"/> object.</summary>
        </member>
        <member name="T:Eco.Core.Serialization.Internal.UniversalIdReferenceService">
            <summary><see cref="T:Eco.Core.Serialization.Internal.IObjectReferenceService"/> for <see cref="T:Eco.Core.Systems.IHasReferenceableSerializableID"/> objects.</summary>
            <inheritdoc cref="T:Eco.Core.Serialization.Internal.IObjectReferenceService"/>
        </member>
        <member name="P:Eco.Core.Serialization.IPersistent.Name">
            <summary> Persistent name. </summary>
        </member>
        <member name="M:Eco.Core.Serialization.IPersistent.GetAndEraseName">
            <summary> Returns current name and erases it as atomic operation. </summary>
        </member>
        <member name="T:Eco.Core.Serialization.Migrations.AggregateMigration">
            <summary>Migration which aggregates multiple migrations into one. Migrations applied after each other for every compatible type.</summary>
        </member>
        <member name="T:Eco.Core.Serialization.Migrations.ArrayEntriesMigration">
            <summary>Array migration which applies migration to every element and modifies collection schema type if required. May be supplied with optional filter for migrated entries.</summary>
        </member>
        <member name="T:Eco.Core.Serialization.Migrations.Attributes.MigrationTypeAttribute">
            <summary>
            Attribute for marking class as <see cref="T:Eco.Core.Serialization.Migrations.MigrationType"/> (read more about migration types in the <see cref="T:Eco.Core.Serialization.Migrations.MigrationType"/> documentation).
            Can be used in two ways:
            - As <see cref="T:Eco.Shared.Serialization.SerializedAttribute"/> type attribute, then the attributed type will be used to represent new type if <see cref="P:Eco.Core.Serialization.Migrations.Attributes.MigrationTypeAttribute.MigrationType"/> not specified.
            The representing type shouldn't exactly match target type, but only have necessary fields. This type may not even existing in final schema, but used as intermediate type
            (i.e. if you have Schema v1 with type Foo and need to migrate to Schema v3 with type Baz, but in Schema v2 type Foo was renamed to Bar and then to Baz in v3. In this case you may need to migrate first to MigrationType("Bar", SinceVersion=2) and then you will be able to migrate from Bar to Baz for version v3).
            - As migration class attribute (the type with <see cref="T:Eco.Core.Serialization.Migrations.Attributes.MigrationAttribute"/>). In most cases when used with migration <see cref="P:Eco.Core.Serialization.Migrations.Attributes.MigrationTypeAttribute.TargetSchemaType"/> is same as <see cref="P:Eco.Core.Serialization.Migrations.Attributes.MigrationTypeAttribute.MigrationType"/> as well as <see cref="P:Eco.Core.Serialization.Migrations.Attributes.MigrationTypeAttribute.SinceVersion"/>. In that cases you can just use constructor with type parameter which sets <see cref="P:Eco.Core.Serialization.Migrations.Attributes.MigrationTypeAttribute.MigrationType"/> to same value as <see cref="P:Eco.Core.Serialization.Migrations.Attributes.MigrationTypeAttribute.TargetSchemaType"/> and <see cref="P:Eco.Core.Serialization.Migrations.Attributes.MigrationTypeAttribute.SinceVersion"/> will be used from <see cref="T:Eco.Core.Serialization.Migrations.Attributes.MigrationAttribute"/>.
            It will help to avoid copy paste and potential errors when these values changes not synced.
            </summary>
        </member>
        <member name="P:Eco.Core.Serialization.Migrations.Attributes.MigrationTypeAttribute.TargetSchemaType">
            <summary>Schema type for the migration type. May be different from <see cref="P:Eco.Core.Serialization.Migrations.Attributes.MigrationTypeAttribute.MigrationType"/> (i.e. class[Foo] as schema type and FooV1 as migration type).</summary>
        </member>
        <member name="P:Eco.Core.Serialization.Migrations.Attributes.MigrationTypeAttribute.SinceVersion">
            <summary>The first version when this type was added. Can't be used with migrations before that version. If not specified then will be populated from <see cref="T:Eco.Core.Serialization.Migrations.Attributes.MigrationAttribute"/> on same type.</summary>
        </member>
        <member name="P:Eco.Core.Serialization.Migrations.Attributes.MigrationTypeAttribute.MigrationType">
            <summary>The type representing <see cref="P:Eco.Core.Serialization.Migrations.Attributes.MigrationTypeAttribute.MigrationType"/>. May be same as <see cref="P:Eco.Core.Serialization.Migrations.Attributes.MigrationTypeAttribute.TargetSchemaType"/> or it's simplified version. Also may represent intermediate type which existed between one of previous supported schema versions and latest schema version.</summary>
        </member>
        <member name="M:Eco.Core.Serialization.Migrations.Attributes.MigrationTypeAttribute.#ctor(System.Type)">
            <summary>Sets both <see cref="P:Eco.Core.Serialization.Migrations.Attributes.MigrationTypeAttribute.TargetSchemaType"/> and <see cref="P:Eco.Core.Serialization.Migrations.Attributes.MigrationTypeAttribute.MigrationType"/> from <paramref name="targetType"/>.</summary>
        </member>
        <member name="M:Eco.Core.Serialization.Migrations.Attributes.MigrationTypeAttribute.#ctor(System.String)">
            <summary>Sets <see cref="P:Eco.Core.Serialization.Migrations.Attributes.MigrationTypeAttribute.TargetSchemaType"/> from <paramref name="classNameOrSchemaType"/>. <see cref="P:Eco.Core.Serialization.Migrations.Attributes.MigrationTypeAttribute.MigrationType"/> should be specified explicitly or will use attributed type.</summary>
        </member>
        <member name="M:Eco.Core.Serialization.Migrations.ClassMigrationBase.MigrateInstance(Eco.Core.Serialization.Migrations.MigrationContext)">
            <summary>
            Migrates an instance with provided <paramref name="context"/>.
            It may modify <paramref name="context"/> with one of following migration results:
            - <see cref="P:Eco.Core.Serialization.Migrations.MigrationContext.ReferenceTypeName"/> != null means that binary content was fully consumed and a reference should be serialized instead. It should contains the referenced object id in <see cref="P:Eco.Core.Serialization.Migrations.MigrationContext.ReferenceId"/>;
            - <see cref="P:Eco.Core.Serialization.Migrations.MigrationContext.Schema"/> modified and output schema is a class schema, it means that original class binary data was replaced with another class binary data and it should use new object serializer;
            - <see cref="P:Eco.Core.Serialization.Migrations.MigrationContext.Schema"/> modified and output schema is the cached serializer schema, it means that original binary content was consumed and object instance created and cached for upcoming deserialization call;
            - <see cref="P:Eco.Core.Serialization.Migrations.MigrationContext.Schema"/> modified, but output schema not class or cached object, it means that <see cref="P:Eco.Core.Serialization.Migrations.MigrationContext.Reader"/> contains compatible binary data. If reader wasn't modified then it will be reset to initial position.
            - <see cref="P:Eco.Core.Serialization.Migrations.MigrationContext.Schema"/> not modified, if <see cref="P:Eco.Core.Serialization.Migrations.MigrationContext.Reader"/> modified then it should be re-serialized with original serializer or just reset reader position otherwise.
            </summary>
        </member>
        <member name="M:Eco.Core.Serialization.Migrations.ClassMigrationBase.MigrateReference(Eco.Core.Serialization.Migrations.MigrationContext)">
            <summary>
            Migrates an reference with provided <paramref name="context"/>.
            It may modify <paramref name="context"/> with one of following migration results:
            - <see cref="P:Eco.Core.Serialization.Migrations.MigrationContext.ReferenceTypeName"/> != null means that binary content was fully consumed and a reference should be serialized instead. It should contains the referenced object id in <see cref="P:Eco.Core.Serialization.Migrations.MigrationContext.ReferenceId"/>;
            - <see cref="P:Eco.Core.Serialization.Migrations.MigrationContext.Schema"/> modified and output schema is a class schema, it means that original class binary data was replaced with another class binary data and it should use new object serializer;
            - <see cref="P:Eco.Core.Serialization.Migrations.MigrationContext.Schema"/> modified and output schema is the cached serializer schema, it means that original binary content was consumed and object instance created and cached for upcoming deserialization call;
            - <see cref="P:Eco.Core.Serialization.Migrations.MigrationContext.Schema"/> modified, but output schema not class or cached object, it means that <see cref="P:Eco.Core.Serialization.Migrations.MigrationContext.Reader"/> contains compatible binary data. If reader wasn't modified then it will be reset to initial position.
            - <see cref="P:Eco.Core.Serialization.Migrations.MigrationContext.Schema"/> not modified, if <see cref="P:Eco.Core.Serialization.Migrations.MigrationContext.Reader"/> modified then it should be re-serialized with original serializer or just reset reader position otherwise.
            </summary>
        </member>
        <member name="T:Eco.Core.Serialization.Migrations.ClassRemoveMigration">
            <summary> Migration for a removed class which allows to invoke <see cref="F:Eco.Core.Serialization.Migrations.ClassRemoveMigration.onRemove"/> callback for removed instances members data. </summary>
        </member>
        <member name="M:Eco.Core.Serialization.Migrations.ClassRemoveMigration.MigrateInstance(Eco.Core.Serialization.Migrations.MigrationContext)">
            <inheritdoc cref="M:Eco.Core.Serialization.Migrations.ClassMigrationBase.MigrateInstance(Eco.Core.Serialization.Migrations.MigrationContext)"/>
        </member>
        <member name="T:Eco.Core.Serialization.Migrations.CollectionEntriesMigration">
            <summary>Abstract collection migration (i.e. array or list).</summary>
        </member>
        <member name="M:Eco.Core.Serialization.Migrations.CollectionEntriesMigration.MigrateContent(Eco.Core.Serialization.Migrations.MigrationContext)">
            <summary>Migrates binary content. If migration not performed (collection is <c>null</c> or empty) then returns <c>false</c>.</summary>
        </member>
        <member name="M:Eco.Core.Serialization.Migrations.CollectionEntriesMigration.MigrateElements(Eco.Core.Serialization.Migrations.MigrationContext,System.IO.BinaryReader,System.IO.BinaryWriter,System.Int32)">
            <summary>Migrate elements from <paramref name="reader"/> to <paramref name="writer"/>. Returns new number of migrated elements (passed by <see cref="F:Eco.Core.Serialization.Migrations.CollectionEntriesMigration.filter"/>).</summary>
        </member>
        <member name="T:Eco.Core.Serialization.Migrations.ConcreteTypeMigration">
            <summary> Migration from base type to multiple concrete types based on object's field values. If you need to migrate only by single field you can use simplified <see cref="T:Eco.Core.Serialization.Migrations.ConcreteTypeMigration`1"/>. </summary>
        </member>
        <member name="M:Eco.Core.Serialization.Migrations.ConcreteTypeMigration.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String},System.Func{System.Object[],System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Eco.Core.Serialization.Migrations.ConcreteTypeMigration"/> class.
            It will convert every class of <paramref name="baseTypeName"/> into more specific (concrete) type using field values of <paramref name="fieldNames"/>.
            For every migrated object it will invoke <paramref name="typeMapper"/> with array of values for <paramref name="fieldNames"/> in same order and the function should return new type name.
            </summary>
        </member>
        <member name="M:Eco.Core.Serialization.Migrations.ConcreteTypeMigration.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String},System.Func{Eco.Core.Serialization.Migrations.DataMigrations.ReaderDataInput[],System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Eco.Core.Serialization.Migrations.ConcreteTypeMigration"/> class.
            It will convert every class of <paramref name="baseTypeName"/> into more specific (concrete) type using <paramref name="fieldNames"/> (members of the object).
            For every migrated object it will invoke <paramref name="typeMapper"/> with array of <see cref="T:Eco.Core.Serialization.Migrations.DataMigrations.ReaderDataInput"/> for <paramref name="fieldNames"/> in same order and the function should return new type name.
            </summary>
        </member>
        <member name="M:Eco.Core.Serialization.Migrations.ConcreteTypeMigration.MigrateInstance(Eco.Core.Serialization.Migrations.MigrationContext)">
            <inheritdoc cref="M:Eco.Core.Serialization.Migrations.ClassMigrationBase.MigrateInstance(Eco.Core.Serialization.Migrations.MigrationContext)"/>
        </member>
        <member name="T:Eco.Core.Serialization.Migrations.ConcreteTypeMigration`1">
            <summary> Migration from base type to multiple concrete types by single (discriminator) field value. </summary>
        </member>
        <member name="M:Eco.Core.Serialization.Migrations.ConcreteTypeMigration`1.#ctor(System.String,System.String,System.Func{`0,System.String})">
            <summary> Initializes a new instance of the <see cref="T:Eco.Core.Serialization.Migrations.ConcreteTypeMigration`1"/> class. </summary>
            <param name="baseTypeName">Base type name (from which concrete types will be expanded).</param>
            <param name="discriminatorName">Name of property or field in base object which will be used to determine concrete type name with typeMapper.</param>
            <param name="typeMapper">Function receives discriminator value and returns concrete type name evaluated from discriminator.</param>
        </member>
        <member name="T:Eco.Core.Serialization.Migrations.DataMigration">
            <summary>Data migration class performs data level modifications (change member type, migrate member, update member, rename member, delete member etc).</summary>
        </member>
        <member name="M:Eco.Core.Serialization.Migrations.DataMigration.#ctor">
            <summary>Internal <see cref="T:Eco.Core.Serialization.Migrations.DataMigration"/> constructor not compatible with any type. Intended to be used for nested migrations (like member migrations).</summary>
        </member>
        <member name="M:Eco.Core.Serialization.Migrations.DataMigration.UpdateMember``2(System.String,System.Func{``0,``1})">
            <summary>Updates member by converting old value to new value. Member schema type changes accordingly.</summary>
        </member>
        <member name="M:Eco.Core.Serialization.Migrations.DataMigration.UpdateMemberFromDataInput``1(System.String,Eco.Core.Serialization.Migrations.DataMigrations.IDataInput[],System.Func{Eco.Core.Serialization.Migrations.DataMigrations.ReaderDataInput,Eco.Core.Serialization.Migrations.DataMigrations.ReaderDataInput[],``0})">
            <summary> Updates member using <see cref="T:Eco.Core.Serialization.Migrations.DataMigrations.ReaderDataInput"/> as original value. It produces value of <typeparamref name="TDst"/> type. </summary>
        </member>
        <member name="M:Eco.Core.Serialization.Migrations.DataMigration.ChangeSchemaType(System.String)">
            <summary>Changes class schema type to <paramref name="newSchemaType"/>. I.e. after all members converted you may decide to convert class itself to another type.</summary>
        </member>
        <member name="M:Eco.Core.Serialization.Migrations.DataMigrations.IDataModification.Apply(Eco.Core.Serialization.Migrations.MigrationContext)">
            <summary>
            Applies modification to `data`.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Eco.Core.Serialization.Migrations.DataMigrations.MemberDataModification">
            <summary>Base class for data member modifications (update, add, migrate, remove etc). Used in <see cref="T:Eco.Core.Serialization.Migrations.DataMigration"/>.</summary>
        </member>
        <member name="M:Eco.Core.Serialization.Migrations.DataMigrations.MemberDataModification.Apply(Eco.Core.Serialization.Migrations.MigrationContext)">
            <summary>Applies member modification to data object context.</summary>
        </member>
        <member name="M:Eco.Core.Serialization.Migrations.DataMigrations.MemberDataModification.GenerateOutput(Eco.Core.Serialization.Migrations.MigrationContext)">
            <summary>Generates data member output value after modification applied.</summary>
        </member>
        <member name="T:Eco.Core.Serialization.Migrations.DataMigrations.MemberDataModification`1">
            <summary>Base class for data member modifications with known output value type. Used in <see cref="T:Eco.Core.Serialization.Migrations.DataMigration"/>.</summary>
            <inheritdoc/>
        </member>
        <member name="M:Eco.Core.Serialization.Migrations.DataMigrations.MemberDataModification`1.TryGenerateValue(System.Collections.Generic.Dictionary{Eco.Core.Serialization.Migrations.DataMigrations.IDataInput,Eco.Core.Serialization.Migrations.DataMigrations.ReaderDataInput},`0@)">
            <summary>Tries to generate value for data member. Returns <c>false</c> if value can't be generated and member should be removed.</summary>
        </member>
        <member name="T:Eco.Core.Serialization.Migrations.DataMigrations.MigrationDataModification">
            <summary><see cref="T:Eco.Core.Serialization.Migrations.DataMigrations.MemberDataModification"/> which applies modification to member with custom <see cref="T:Eco.Core.Serialization.Migrations.IMigration"/>.</summary>
            <inheritdoc cref="T:Eco.Core.Serialization.Migrations.DataMigrations.MemberDataModification"/>
        </member>
        <member name="P:Eco.Core.Serialization.Migrations.DataMigrations.ReaderDataInput.Count">
            <summary>Returns count of elements for Data Input value. For string it will be length of string, for enumerable or array number of elements in collection.
            If instance is <c>null</c> then return has null value. This way it let to get elements count without objects allocation and instantiation.
            </summary>
            <exception cref="T:System.NotSupportedException">When doesn't know how to get length for <see cref="P:Eco.Core.Serialization.Migrations.DataMigrations.ReaderDataInput.Serializer"/>.</exception>
        </member>
        <member name="P:Eco.Core.Serialization.Migrations.DataMigrations.ReaderDataInput.StringValue">
            <summary> Represents Data Input value as string. Currently only implemented for enums and strings. </summary>
        </member>
        <member name="T:Eco.Core.Serialization.Migrations.DataMigrations.SchemaTypeChangeModification">
            <summary><see cref="T:Eco.Core.Serialization.Migrations.DataMigrations.IDataModification"/> which changes schema type of data object itself (not one of it's members).</summary>
            <inheritdoc/>
        </member>
        <member name="T:Eco.Core.Serialization.Migrations.DummyMigration">
            <summary>
            This migration may be used if you don't actually want to do any migration logic, but want to include this type in migration chain (to process attributes etc).
            </summary>
        </member>
        <member name="T:Eco.Core.Serialization.Migrations.EnumerableEntriesMigration">
            <summary>Enumerable collection migration which applies migration to every element and modifies collection schema type if required. May be supplied with optional filter for migrated entries.</summary>
        </member>
        <member name="T:Eco.Core.Serialization.Migrations.IClassMigration">
            <summary>Base interface for all class migrations. Shouldn't be used directly, instead use <see cref="T:Eco.Core.Serialization.Migrations.IInstanceMigration"/> or <see cref="T:Eco.Core.Serialization.Migrations.IReferenceMigration"/> or both.</summary>
        </member>
        <member name="M:Eco.Core.Serialization.Migrations.ClassMigrationExtensions.IsCompatibleContext(Eco.Core.Serialization.Migrations.IClassMigration,Eco.Core.Serialization.Migrations.MigrationContext)">
            <summary>Checks if <see cref="T:Eco.Core.Serialization.Migrations.IClassMigration"/> is compatible with <paramref name="context"/>. It compatible if either it's compatible types matches context schema type or reference type name.</summary>
        </member>
        <member name="T:Eco.Core.Serialization.Migrations.IMigration">
            <summary>
            Base migration class.
            </summary>
        </member>
        <member name="M:Eco.Core.Serialization.Migrations.IMigration.Migrate(Eco.Core.Serialization.Migrations.MigrationContext)">
            <summary>
            Performs migration using current MigrationContext.
            <see cref="M:Eco.Core.Serialization.Migrations.IMigration.Migrate(Eco.Core.Serialization.Migrations.MigrationContext)"/> method should follow a contract:
            - It can only modify <see cref="P:Eco.Core.Serialization.Migrations.MigrationContext.Reader"/> and <see cref="P:Eco.Core.Serialization.Migrations.MigrationContext.Schema"/>.
            - <see cref="P:Eco.Core.Serialization.Migrations.MigrationContext.Schema"/> may only be modified with <see cref="M:Eco.Core.Serialization.Migrations.MigrationManager.CreateSchema(System.String)"/> or other similar methods (no new instance creation!)
            - If <see cref="P:Eco.Core.Serialization.Migrations.MigrationContext.Reader"/> modified then it should fully consume migrated content from original reader, otherwise it should set the reader at initial read position.
            General rule is to always return a reader positioned at beginning of serialized content.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Eco.Core.Serialization.Migrations.InstanceMigration">
            <summary>
            Base class for instance migrations. This kind of migration doesn't care about class headers, but only migrates instance content (fields, properties etc).
            <see cref="T:Eco.Core.Serialization.Migrations.ClassMigrationBase"/> takes are about nullability flags and other meta info. It also constructs serialized header from output schema.
            </summary>
        </member>
        <member name="M:Eco.Core.Serialization.Migrations.InstanceMigration.#ctor(System.String)">
            <summary>Constructs new <see cref="T:Eco.Core.Serialization.Migrations.InstanceMigration"/> which works with <paramref name="compatibleType"/>. <paramref name="compatibleType"/> is either schema type or type name.</summary>
        </member>
        <member name="M:Eco.Core.Serialization.Migrations.InstanceMigration.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Constructs new <see cref="T:Eco.Core.Serialization.Migrations.InstanceMigration"/> which works with <paramref name="compatibleTypes"/>. <paramref name="compatibleTypes"/> is either schema types or type names or mix.</summary>
        </member>
        <member name="T:Eco.Core.Serialization.Migrations.IReferenceMigration">
            <summary>Interface for object References migrations. I.e. for <see cref="T:Eco.Core.Serialization.Migrations.ClassRenameMigration"/> you need it to change reference type.</summary>
        </member>
        <member name="M:Eco.Core.Serialization.Migrations.IReferenceMigration.MigrateReference(Eco.Core.Serialization.Migrations.MigrationContext)">
            <summary>Migrates <paramref name="context"/> containing information about reference: <see cref="P:Eco.Core.Serialization.Migrations.MigrationContext.ReferenceTypeName"/> and <see cref="P:Eco.Core.Serialization.Migrations.MigrationContext.ReferenceId"/>.</summary>
        </member>
        <member name="T:Eco.Core.Serialization.Migrations.ITypeMigration">
            <summary>Migration may implement the interface if it supports type migration (i.e. when type renamed).</summary>
        </member>
        <member name="M:Eco.Core.Serialization.Migrations.ITypeMigration.MigrateType(System.String)">
            <summary>Migrates <paramref name="typeName"/> and returns new type name.</summary>
        </member>
        <member name="T:Eco.Core.Serialization.Migrations.KeyToReferenceMigration`2">
            <summary>Migrates a key to reference which have to be resolved by the key using <see cref="F:Eco.Core.Serialization.Migrations.KeyToReferenceMigration`2.referenceResolver"/>.</summary>
        </member>
        <member name="T:Eco.Core.Serialization.Migrations.MigrationManager">
            <summary>Class responsible for migration stuff. It holds migrations, migration types for different versions and can apply them.</summary>
        </member>
        <member name="M:Eco.Core.Serialization.Migrations.MigrationManager.AddInstanceMigration(System.Single,Eco.Core.Serialization.Migrations.IInstanceMigration)">
            <summary>Adds <see cref="T:Eco.Core.Serialization.Migrations.IInstanceMigration"/> which will be applied <paramref name="sinceVersion"/>.</summary>
        </member>
        <member name="M:Eco.Core.Serialization.Migrations.MigrationManager.AddReferenceMigration(System.Single,Eco.Core.Serialization.Migrations.IReferenceMigration)">
            <summary>Adds <see cref="T:Eco.Core.Serialization.Migrations.IReferenceMigration"/> which will be applied <paramref name="sinceVersion"/>.</summary>
        </member>
        <member name="M:Eco.Core.Serialization.Migrations.MigrationManager.AddTypeMigration(System.Single,Eco.Core.Serialization.Migrations.ITypeMigration)">
            <summary>Adds <see cref="T:Eco.Core.Serialization.Migrations.ITypeMigration"/> which will be applied <paramref name="sinceVersion"/>.</summary>
        </member>
        <member name="M:Eco.Core.Serialization.Migrations.MigrationManager.AddMigratedType(System.Single,Eco.Core.Serialization.Migrations.Attributes.MigratedTypeAttribute)">
            <summary>Adds <see cref="T:Eco.Core.Serialization.Migrations.Attributes.MigratedTypeAttribute"/> which will be used to access erased information for migrated type (i.e. if it was struct and was changed to class or vice versa).</summary>
        </member>
        <member name="M:Eco.Core.Serialization.Migrations.MigrationManager.TryCreateMigrationChainSerializer(System.String,Eco.Core.Serialization.SerializerSchema,Eco.Core.Serialization.Serializers.ISerializer@)">
            <summary>Tries to create <see cref="T:Eco.Core.Serialization.Serializers.MigrationChainSerializer"/>. Success if there any registered migrations for <paramref name="schemaType"/>.</summary>
        </member>
        <member name="M:Eco.Core.Serialization.Migrations.MigrationManager.MigrateInstance(Eco.Core.Serialization.Migrations.MigrationContext)">
            <summary>Migrates class instance provided with <paramref name="context"/>.</summary>
        </member>
        <member name="M:Eco.Core.Serialization.Migrations.MigrationManager.MigrateReference(Eco.Core.Serialization.Migrations.MigrationContext)">
            <summary>Migrates object reference in the <paramref name="context"/> specified with <see cref="P:Eco.Core.Serialization.Migrations.MigrationContext.ReferenceTypeName"/> and <see cref="P:Eco.Core.Serialization.Migrations.MigrationContext.ReferenceId"/>.</summary>
        </member>
        <member name="M:Eco.Core.Serialization.Migrations.MigrationManager.MigrateType(System.String)">
            <summary>Migrates <see cref="T:System.Type"/> if it was renamed.</summary>
        </member>
        <member name="M:Eco.Core.Serialization.Migrations.MigrationManager.MigrateTypeInternal(System.String@,System.Single@,System.Collections.Generic.IEnumerable{Eco.Core.Serialization.Migrations.VersionedObject{Eco.Core.Serialization.Migrations.ITypeMigration}})">
            <summary>Migrates <paramref name="typeName"/> to new type name using <paramref name="migrations"/>. It updates <paramref name="typeName"/> and <paramref name="version"/> as result. Returns <c>true</c> if migration fully finished.</summary>
        </member>
        <member name="M:Eco.Core.Serialization.Migrations.MigrationManager.Migrate(Eco.Core.Serialization.Migrations.MigrationContext)">
            <summary>Migrates <paramref name="context"/> and returns <see cref="M:Eco.Core.Serialization.Migrations.MigrationManager.DecodeObject(Eco.Core.Serialization.Migrations.ImmutableSerializerSchema,System.IO.BinaryReader)"/> (either reference or instance).</summary>
        </member>
        <member name="M:Eco.Core.Serialization.Migrations.MigrationManager.DecodeObject(Eco.Core.Serialization.Migrations.ImmutableSerializerSchema,System.IO.BinaryReader)">
            <summary>
            Decodes object using provided schema.
            </summary>
            <param name="schema">schema.</param>
            <param name="reader">reader.</param>
            <returns>object instance.</returns>
        </member>
        <member name="M:Eco.Core.Serialization.Migrations.MigrationManager.AddReferencedObjectSerializer``2(System.Func{``0,``1})">
            <summary>Shortcut for <inheritdoc cref="M:Eco.Core.Serialization.Migrations.MigrationManager.AddReferencedObjectSerializer(System.String,System.Type,System.Func{System.Object,System.Object})"/>.</summary>
        </member>
        <member name="M:Eco.Core.Serialization.Migrations.MigrationManager.AddReferencedObjectSerializer(System.String,System.Type,System.Func{System.Object,System.Object})">
            <summary>Adds new <see cref="T:Eco.Core.Serialization.Serializers.ReferencedObjectSerializer"/> created for provided arguments.</summary>
        </member>
        <member name="M:Eco.Core.Serialization.Migrations.MigrationManager.ReadMembers(System.IO.BinaryReader,System.Collections.Generic.IDictionary{System.String,Eco.Core.Serialization.Migrations.DataMigrations.MemberDataInput},Eco.Core.Serialization.Migrations.ImmutableSerializerSchema,System.Collections.Generic.Dictionary{System.String,System.ValueTuple{System.Int64,System.Int64}}@)">
            <summary>
            Reads schema, returns decoded data for every requested member and returns member ranges mapping to positions in the stream.
            Reader positioned at the end of schema data after call to the method.
            </summary>
        </member>
        <member name="M:Eco.Core.Serialization.Migrations.MigrationManager.ReadMembers(System.IO.BinaryReader,System.IO.Stream,System.Collections.Generic.IDictionary{System.String,Eco.Core.Serialization.Migrations.DataMigrations.MemberDataInput},Eco.Core.Serialization.Migrations.ImmutableSerializerSchema,System.Collections.Generic.Dictionary{System.String,System.ValueTuple{System.Int64,System.Int64}}@)">
            <summary>
            Reads schema, returns decoded data for every requested member and returns member ranges mapping to positions in the stream.
            Reader positioned at the end of schema data after call to the method.
            </summary>
            <param name="reader">binary reader to read data from.</param>
            <param name="instanceStream">stream with instance data which will advance with <paramref name="reader"/>. It may be reader's base stream or tapped stream from <see cref="T:Eco.Core.Utils.Streams.ReadOnlyForkStream"/>.</param>
            <param name="members">set of requested member names.</param>
            <param name="schema">schema describing data to read.</param>
            <param name="memberRanges">output dictionary with mapping between member names and they reader's positions.</param>
            <returns>dictionary with requested members data.</returns>
        </member>
        <member name="M:Eco.Core.Serialization.Migrations.MigrationManager.ReadMembersTo(System.IO.BinaryReader,System.IO.Stream,System.Collections.Generic.IDictionary{System.String,Eco.Core.Serialization.Migrations.DataMigrations.MemberDataInput},Eco.Core.Serialization.Migrations.ImmutableSerializerSchema,System.Collections.Generic.Dictionary{Eco.Core.Serialization.Migrations.DataMigrations.IDataInput,Eco.Core.Serialization.Migrations.DataMigrations.ReaderDataInput},System.Collections.Generic.Dictionary{System.String,System.ValueTuple{System.Int64,System.Int64}}@)">
            <summary>
            Reads schema, saves to <c>data</c> decoded data for every requested member and returns member ranges mapping to positions in the stream.
            Reader positioned at the end of schema data after call to the method.
            </summary>
            <param name="reader">binary reader to read data from.</param>
            <param name="instanceStream">stream with instance data which will advance with <paramref name="reader"/>. It may be reader's base stream or tapped stream from <see cref="T:Eco.Core.Utils.Streams.ReadOnlyForkStream"/>.</param>
            <param name="members">set of requested member names.</param>
            <param name="schema">schema describing data to read.</param>
            <param name="data">data dictionary to store requested members data.</param>
            <param name="memberRanges">output dictionary with mapping between member names and they reader's positions.</param>
        </member>
        <member name="M:Eco.Core.Serialization.Migrations.MigrationManager.IsNullableType(System.String,System.Single)">
            <summary>
            Returns if type is nullable in specific schema version.
            </summary>
            <param name="schemaType">schema type.</param>
            <param name="version">schema version.</param>
            <returns><c>true</c> - if schema type nullable in specified schema version.</returns>
        </member>
        <member name="M:Eco.Core.Serialization.Migrations.MigrationManager.CopySchemaContent(Eco.Core.Serialization.Migrations.ImmutableSerializerSchema,System.IO.BinaryReader,System.IO.BinaryWriter)">
            <summary>
            Copies schema content from reader to writer without actually deserializing it.
            </summary>
            <param name="schema">schema.</param>
            <param name="reader">reader to read from.</param>
            <param name="writer">writer to write content to.</param>
        </member>
        <member name="M:Eco.Core.Serialization.Migrations.MigrationManager.SkipSchemaContent(Eco.Core.Serialization.Migrations.ImmutableSerializerSchema,System.IO.BinaryReader)">
            <summary>Skips schema content from reader without actually deserializing it.</summary>
            <param name="schema">schema.</param>
            <param name="reader">reader to skip from.</param>
        </member>
        <member name="T:Eco.Core.Serialization.Migrations.MigrationType">
            <summary> Contains information about new type added during migration. Without this info it won't be possible to encode the type. </summary>
        </member>
        <member name="M:Eco.Core.Serialization.Migrations.MigrationUtils.SerializeNullAsReader">
            <summary> Serializes null object value as <see cref="T:System.IO.BinaryReader"/>. </summary>
        </member>
        <member name="M:Eco.Core.Serialization.Migrations.MigrationUtils.CopySerializerContent(Eco.Core.Serialization.Serializers.ISerializer,System.IO.BinaryReader,System.IO.BinaryWriter)">
            <summary>
            Copies serializer content from reader to writer without actually deserializing it.
            </summary>
            <param name="serializer">serializer.</param>
            <param name="reader">reader to read from.</param>
            <param name="writer">writer to write content to.</param>
        </member>
        <member name="M:Eco.Core.Serialization.Migrations.MigrationUtils.CopySerializerContent(Eco.Core.Serialization.Serializers.ISerializer,System.IO.BinaryReader,System.IO.Stream)">
            <summary>
            Copies serializer content from reader to writer without actually deserializing it.
            </summary>
            <param name="serializer">serializer.</param>
            <param name="reader">reader to read from.</param>
            <param name="outputStream">output stream to write content to.</param>
        </member>
        <member name="M:Eco.Core.Serialization.Migrations.MigrationUtils.CopySerializerInstanceContent(Eco.Core.Serialization.Serializers.ObjectSerializer,System.IO.BinaryReader,System.IO.BinaryWriter)">
            <summary>
            Copies serializer instance content from reader to writer without actually deserializing it (it uses <see cref="M:Eco.Core.Serialization.Serializers.ObjectSerializer.SkipInstance(System.IO.BinaryReader)"/> internally
            which only copies instance content without header - object flags and polymorphic object id).
            </summary>
            <param name="serializer">object serializer.</param>
            <param name="reader">reader to read from.</param>
            <param name="writer">writer to write content to.</param>
        </member>
        <member name="M:Eco.Core.Serialization.Migrations.MigrationUtils.CopySerializerInstanceContent(Eco.Core.Serialization.Serializers.ObjectSerializer,System.IO.BinaryReader,System.IO.Stream)">
            <summary>
            Copies serializer instance content from reader to writer without actually deserializing it (it uses <see cref="M:Eco.Core.Serialization.Serializers.ObjectSerializer.SkipInstance(System.IO.BinaryReader)"/> internally
            which only copies instance content without header - object flags and polymorphic object id).
            </summary>
            <param name="serializer">object serializer.</param>
            <param name="reader">reader to read from.</param>
            <param name="outputStream">output stream to write content to.</param>
        </member>
        <member name="T:Eco.Core.Serialization.Migrations.ObjectInstanceMigration`2">
            <summary> Used to migrate object instance of compatible type (specified in constructor) to instance of same or another type. It may not produce null value as result and also may not produce value type. May be used as root level migration. </summary>
        </member>
        <member name="T:Eco.Core.Serialization.Migrations.ObjectMigration`2">
            <summary>
            Used to migrate object instance to other object instance. It may not be used as auto root-level migration, but can be used explicitly as member migration or collection entry migration.
            It allows to migrate object to null or to value type (opposite to <see cref="T:Eco.Core.Serialization.Migrations.ObjectInstanceMigration`2"/>).
            </summary>
        </member>
        <member name="M:Eco.Core.Serialization.Migrations.SchemaUtils.GetSchemaType(System.Type)">
            <summary>Returns schema name corresponding to type. It uses generation rules or built-in name if available.</summary>
        </member>
        <member name="M:Eco.Core.Serialization.Migrations.SchemaUtils.AsClassSchemaType(System.String)">
            <summary>Returns class schema type. If <paramref name="typeNameOrSchemaType"/> already class schema type then returns as is otherwise assume it is type name and builds schema type from the type name.</summary>
        </member>
        <member name="M:Eco.Core.Serialization.Migrations.SchemaUtils.FixOldFormatGenericSchemaType(System.String)">
            <summary> Converts old schema type for generic types into new one. </summary>
            <example>
            <code>class[Eco.Core.Systems.GeneratedRegistrarWrapper`1[[Eco.Gameplay.Items.TagManager, Eco.Gameplay, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]]</code>
            will be converted into.
            <code>class[Eco.Core.Systems.GeneratedRegistrarWrapper{class[Eco.Gameplay.Items.TagManager]}]</code>
            </example>
        </member>
        <member name="T:Eco.Core.Serialization.Migrations.SeekableRead">
            <summary>Helps to make seekable read on non-seekable streams.</summary>
        </member>
        <member name="M:Eco.Core.Serialization.Migrations.SeekableRead.Start(System.IO.BinaryReader@)">
            <summary>Prepares members reader. It checks if Base Stream is seekable and if it isn't then it makes new <see cref="T:System.IO.BinaryReader"/> with <see cref="T:Eco.Core.Utils.Streams.ReadOnlyForkStream"/> which "taps" to new seekable instance stream.</summary>
        </member>
        <member name="M:Eco.Core.Serialization.Migrations.SeekableRead.Reset">
            <summary>Resets seekable read to position from which it was started.</summary>
        </member>
        <member name="M:Eco.Core.Serialization.Migrations.SeekableRead.ResetReader(System.IO.BinaryReader)">
            <summary>Resets seekable read to position from which it was started and returns either same reader or new reader if stream was changed.</summary>
        </member>
        <member name="T:Eco.Core.Serialization.Migrations.ValueToClassMigration">
            <summary>Migrates value to class with one of it's field filled with the value. Useful when required migration from value to class wrapping the value and extending it with additional info.</summary>
        </member>
        <member name="M:Eco.Core.Serialization.Migrations.ValueToClassMigration.#ctor(System.String,System.String)">
            <summary>Creates new <see cref="T:Eco.Core.Serialization.Migrations.ValueToClassMigration"/> which converts a value to class with <paramref name="schemaType"/> and saves value to <paramref name="fieldName"/> with same schema type as the value.</summary>
        </member>
        <member name="T:Eco.Core.Serialization.Migrations.ValueToCollectionMigration">
            <summary>Migrates value to collection with single element. Useful when required migration from former one element to collection of such elements.</summary>
        </member>
        <member name="T:Eco.Core.Serialization.Migrations.VersionedObject`1">
            <summary>Comparer which only compares version component of (version, object) component.</summary>
        </member>
        <member name="T:Eco.Core.Serialization.Migrations.VersionedTypeMapping`1">
            <summary>Mapping between type name and corresponding object (i.e. <see cref="T:Eco.Core.Serialization.Migrations.IInstanceMigration"/> or <see cref="T:Eco.Core.Serialization.Migrations.IReferenceMigration"/>) which aware about versioning.</summary>
        </member>
        <member name="M:Eco.Core.Serialization.Migrations.VersionedTypeMapping`1.HasMapping(System.String)">
            <summary>Checks if there any mapping for any version for <paramref name="schemaType"/>.</summary>
        </member>
        <member name="M:Eco.Core.Serialization.Migrations.VersionedTypeMapping`1.TryGetVersionedObjects(System.String,System.Single,System.Collections.Generic.IEnumerable{Eco.Core.Serialization.Migrations.VersionedObject{`0}}@)">
            <summary>Tries to get versioned objects for <paramref name="schemaType"/> having version greater than <paramref name="sinceVersion"/>.</summary>
        </member>
        <member name="M:Eco.Core.Serialization.Migrations.VersionedTypeMapping`1.AddRange(System.Collections.Generic.IEnumerable{System.String},System.Single,`0)">
            <summary>Adds mapping for all <paramref name="schemaTypes"/>.</summary>
        </member>
        <member name="M:Eco.Core.Serialization.Migrations.VersionedTypeMapping`1.Add(System.String,System.Single,`0)">
            <summary>Adds mapping for <paramref name="schemaType"/>.</summary>
        </member>
        <member name="T:Eco.Core.Serialization.PersistenceManager">
            <summary> <see cref="T:Eco.Core.Serialization.PersistenceManager"/> responsible for objects persistence (marking as dirty, delete, persist to DataStore). </summary>
        </member>
        <member name="M:Eco.Core.Serialization.PersistenceManager.AddBlob(Eco.Core.Serialization.DataBlob)">
            <summary> Adds <paramref name="blob"/> to persistence manager. It will be persisted in next call to <see cref="M:Eco.Core.Serialization.PersistenceManager.PersistAllAsync(Eco.Core.Serialization.DataStore.ExclusiveAccess)"/>. </summary>
        </member>
        <member name="M:Eco.Core.Serialization.PersistenceManager.MarkDirty(Eco.Core.Serialization.IStorage)">
            <summary>
            Marks storage as dirty using current version.
            During persist phase it increases version and only saves objects from previous version.
            </summary>
        </member>
        <member name="M:Eco.Core.Serialization.PersistenceManager.Remove(Eco.Core.Serialization.IStorage)">
            <summary> Removes <paramref name="storage"/> from <see cref="F:Eco.Core.Serialization.PersistenceManager.pendingStorages"/>. It doesn't remove <paramref name="storage"/> immediate, but instead places it in <see cref="F:Eco.Core.Serialization.PersistenceManager.pendingStorages"/> to be processed with <see cref="M:Eco.Core.Serialization.PersistenceManager.PersistAllAsync(Eco.Core.Serialization.DataStore.ExclusiveAccess)"/>. </summary>
        </member>
        <member name="M:Eco.Core.Serialization.PersistenceManager.PersistAllAsync(Eco.Core.Serialization.DataStore.ExclusiveAccess)">
            <summary> Increases version and persists all dirty objects with last version. </summary>
        </member>
        <member name="M:Eco.Core.Serialization.PersistenceManager.ApplyChanges(Eco.Core.Serialization.DataStore.ContentAccessor@)">
            <summary> Applies all pending changes. </summary>
        </member>
        <member name="M:Eco.Core.Serialization.PersistenceManager.PersistBlobs(Eco.Core.Serialization.DataStore.ContentAccessor@)">
            <summary> Persists raw data blobs to data store using <paramref name="contentAccessor"/>. </summary>
        </member>
        <member name="M:Eco.Core.Serialization.PersistenceManager.Delete(Eco.Core.Serialization.DataStore.ContentAccessor@,Eco.Core.Serialization.IStorage)">
            <summary> Deletes storage with <paramref name="contentAccessor"/>. </summary>
        </member>
        <member name="M:Eco.Core.Serialization.PersistenceManager.Persist(Eco.Core.Serialization.DataStore.ContentAccessor@,Eco.Core.Serialization.IStorage)">
            <summary> Persists object with <paramref name="contentAccessor"/>. </summary>
        </member>
        <member name="M:Eco.Core.Serialization.PersistenceManager.ClearDirtyState(Eco.Core.Serialization.IStorage)">
            <summary>
            Clears dirty state for the <paramref name="storage"/>.
            </summary>
        </member>
        <member name="M:Eco.Core.Serialization.PersistenceManager.IsDirty(Eco.Core.Serialization.IStorage)">
            <summary>
            Checks if the <paramref name="storage"/> is dirty.
            </summary>
        </member>
        <member name="T:Eco.Core.Serialization.Schema.ClassSerializerSchemaBuilder">
            <summary>Custom serializer schema builder. Doesn't require existing type. Used for migration tests.</summary>
        </member>
        <member name="T:Eco.Core.Serialization.SerializationTimestamp">
            <summary>
            This struct should be used for auto-generated serialization timestamps which then may be used to check if serialized version is up to date.
            When loaded it always contains last timestamp when it was serialized which may be used to ensure serialized versions contains actual copy and invalidate it if required (i.e. for height caches).
            Can be just added to serialized class which aware about serialization timestamp.
            IMPORTANT: It should be non-readonly field! If copied (i.e. when assigned by value) then it will contain snapshot value for <see cref="P:Eco.Core.Serialization.SerializationTimestamp.LastSerializedValue"/>.
            </summary>
        </member>
        <member name="P:Eco.Core.Serialization.SerializationTimestamp.Value">
            <summary>When serialized this value will be generated and saved. It also updates <see cref="P:Eco.Core.Serialization.SerializationTimestamp.LastSerializedValue"/>. Can be used to invalidate caches and other syncs.</summary>
        </member>
        <member name="P:Eco.Core.Serialization.SerializationTimestamp.LastSerializedValue">
            <summary>Contains last serialized <see cref="P:Eco.Core.Serialization.SerializationTimestamp.Value"/> (actually timestamp when it was last time serialized and persisted). The value is comparable with <see cref="P:Eco.Shared.Utils.TimeUtil.Seconds"/>.</summary>
        </member>
        <member name="M:Eco.Core.Serialization.SerializationTimestamp.op_Implicit(Eco.Core.Serialization.SerializationTimestamp)~System.Double">
            <summary>May be implicitly converted to <see cref="T:System.Double"/> (will use <see cref="P:Eco.Core.Serialization.SerializationTimestamp.LastSerializedValue"/>).</summary>
        </member>
        <member name="M:Eco.Core.Serialization.SerializationUtils.CreateSerializer(System.Boolean,System.Boolean,Newtonsoft.Json.ObjectCreationHandling)">
            <summary>Creates <see cref="T:Newtonsoft.Json.JsonSerializer"/> using settings created with <see cref="M:Eco.Core.Serialization.SerializationUtils.CreateSerializerSettings(System.Boolean,System.Boolean)"/>.</summary>
        </member>
        <member name="M:Eco.Core.Serialization.SerializationUtils.PopulateObjectWithJson(System.String,System.Object,Newtonsoft.Json.ObjectCreationHandling)">
            <summary>Populate json from the string (jsonText)</summary>
        </member>
        <member name="M:Eco.Core.Serialization.SerializationUtils.PopulateObjectWithJson(Newtonsoft.Json.Linq.JObject,System.Object,Newtonsoft.Json.ObjectCreationHandling)">
            <summary>Populate json from the JObject. Useful if you need to change json on the way so it won't need to read it twice</summary>
        </member>
        <member name="F:Eco.Core.Serialization.CurrentSerializer.LoadFinished">
            <summary>Called when serialization is finished but before '[OnPostLoad]' tagged functions are called. Passes all loaded objects.</summary>
        </member>
        <member name="M:Eco.Core.Serialization.EcoSerializer.SerializeTo(System.IO.Stream,System.Object)">
            <summary> Serializes <paramref name="obj"/> to <paramref name="stream"/>. </summary>
        </member>
        <member name="M:Eco.Core.Serialization.EcoSerializer.SerializeTo``1(System.IO.Stream,``0)">
            <summary> Serializes <paramref name="obj"/> to <paramref name="stream"/>. </summary>
        </member>
        <member name="M:Eco.Core.Serialization.EcoSerializer.CollectMigrations(Eco.Core.Serialization.Migrations.MigrationManager)">
            <summary>Collects all suitable migrations (which should be applied since <see cref="P:Eco.Core.Serialization.EcoSerializer.LastVersion"/>).</summary>
        </member>
        <member name="M:Eco.Core.Serialization.EcoSerializer.CollectMigrationTypes">
            <summary>Collects and registers all applicable migration types (with SinceVersion > LastVersion). See <see cref="T:Eco.Core.Serialization.Migrations.Attributes.MigrationTypeAttribute"/> and <see cref="T:Eco.Core.Serialization.Migrations.MigrationType"/>.</summary>
        </member>
        <member name="M:Eco.Core.Serialization.EcoSerializer.CreateMigrationType(System.Type,Eco.Core.Serialization.Migrations.Attributes.MigrationTypeAttribute,System.Nullable{System.Single})">
            <summary>Creates new <see cref="T:Eco.Core.Serialization.Migrations.MigrationType"/> from <paramref name="attribute"/> or returns <c>null</c> if this attribute won't produce the migration type (it should be newer than last schema version).</summary>
        </member>
        <member name="T:Eco.Core.Serialization.Serializers.Array2DSerializer`1">
            <summary>Can serialize to a compressed Array2d or a regular Array2d.</summary>
        </member>
        <member name="M:Eco.Core.Serialization.Serializers.Array2DSerializer`1.EncodeElementsWithElementSerializer(System.IO.BinaryWriter,`0[],Eco.Core.Serialization.SerializeFlags)">
            <summary>Regular elements encode method when <see cref="F:Eco.Core.Serialization.Serializers.Array2DSerializer`1.valueSerializer"/> is not available.</summary>
        </member>
        <member name="M:Eco.Core.Serialization.Serializers.Array2DSerializer`1.EncodeElementsWithValueSerializer(System.IO.BinaryWriter,`0[],Eco.Core.Serialization.SerializeFlags)">
            <summary>Optimized elements encode method using <see cref="F:Eco.Core.Serialization.Serializers.Array2DSerializer`1.valueSerializer"/> if available.</summary>
        </member>
        <member name="M:Eco.Core.Serialization.Serializers.Array2DSerializer`1.DecodeElementsWithElementSerializer(System.IO.BinaryReader,`0[])">
            <summary>Regular elements decode method when <see cref="F:Eco.Core.Serialization.Serializers.Array2DSerializer`1.valueSerializer"/> is not available.</summary>
        </member>
        <member name="M:Eco.Core.Serialization.Serializers.Array2DSerializer`1.DecodeElementsWithValueSerializer(System.IO.BinaryReader,`0[])">
            <summary>Optimized elements decode method using <see cref="F:Eco.Core.Serialization.Serializers.Array2DSerializer`1.valueSerializer"/> if available.</summary>
        </member>
        <member name="T:Eco.Core.Serialization.Serializers.ArraySerializer">
            <summary>Base class for array serializers. Based on provided parameters to <see cref="M:Eco.Core.Serialization.Serializers.ArraySerializer.Create(System.Type,Eco.Core.Serialization.Serializers.ISerializer)"/> factory method it either creates <see cref="T:Eco.Core.Serialization.Serializers.DefaultArraySerializer"/> or <see cref="T:Eco.Core.Serialization.Serializers.ArraySerializer`1"/> (optimized version for <see cref="T:Eco.Core.Serialization.Serializers.ValueSerializer`1"/>).</summary>
        </member>
        <member name="M:Eco.Core.Serialization.Serializers.ArraySerializer.Create(System.Type,Eco.Core.Serialization.Serializers.ISerializer)">
            <summary>Factory method which returns best matching <see cref="T:Eco.Core.Serialization.Serializers.ArraySerializer"/> implementation.</summary>
        </member>
        <member name="T:Eco.Core.Serialization.Serializers.ArraySerializer`1">
            <summary>Typed version of <see cref="T:Eco.Core.Serialization.Serializers.ArraySerializer"/> for element serializer inherited from <see cref="T:Eco.Core.Serialization.Serializers.ValueSerializer`1"/> for better performance and avoid boxing/unboxing for value types.</summary>
        </member>
        <member name="T:Eco.Core.Serialization.Serializers.DefaultArraySerializer">
            <summary>Default implementation of <see cref="T:Eco.Core.Serialization.Serializers.ArraySerializer"/> which uses straightforward unoptimized algorithm for encoding and decoding when optimized version not possible.</summary>
        </member>
        <member name="T:Eco.Core.Serialization.Serializers.IEnumSerializer">
            <summary>
            Marker interface for Enum Serializer.
            </summary>
        </member>
        <member name="M:Eco.Core.Serialization.Serializers.ClassMigrationSerializer`1.EncodeInstanceWith(Eco.Core.Serialization.Serializers.ClassSerializer,System.IO.BinaryWriter,System.Object,Eco.Core.Serialization.SerializeFlags)">
            <summary>
            This method's main purpose is to provide access to internal classSerializer.EncodeMembers for migration serializers.
            </summary>
            <param name="classSerializer">class serializer to be used for members encoding.</param>
            <param name="writer">binary writer.</param>
            <param name="instance">instance which members will be encoded.</param>
            <param name="flags"></param>
        </member>
        <member name="M:Eco.Core.Serialization.Serializers.ClassSerializer`1.ConstructStronglyTypedActionForPropertySetter(System.Reflection.MethodInfo)">
            <summary>
            Speeds up access to <see cref="T:System.Reflection.MethodInfo"/> style reflection items. Created by Jon Skeet. Adapted for
            void type methods (specifically property setter)
            https://blogs.msmvps.com/jonskeet/2008/08/09/making-reflection-fly-and-exploring-delegates/.
            </summary>
            <param name="method">The method info to strongly type. This must be a method on <typeparamref name="T"/>.</param>
            <returns>A strongly typed already resolved and quick <see cref="T:System.Action"/> for this <see cref="T:System.Reflection.MethodInfo"/>.</returns>
        </member>
        <member name="M:Eco.Core.Serialization.Serializers.DictionarySerializer`3.Add(System.Object,System.Object,System.Object)">
            <summary>Adds mapping between <paramref name="key"/> and <paramref name="value"/> to an <paramref name="instance"/>.</summary>
        </member>
        <member name="M:Eco.Core.Serialization.Serializers.DictionarySerializer`3.AddDelayed(System.Object,Eco.Core.Serialization.DecodedObject,Eco.Core.Serialization.DecodedObject)">
            <summary>Adds mapping delayed until <see cref="F:Eco.Core.Serialization.DecodedObject.SimpleFixups"/> applied. Usually used for references which may not yet be available on deserialization stage.</summary>
        </member>
        <member name="T:Eco.Core.Serialization.Serializers.DictionarySkipperSerializer">
            <summary>Class for skipping dictionaries using inner types that were removed.</summary>
        </member>
        <member name="T:Eco.Core.Serialization.Serializers.EnumerableSerializer">
            <summary>Serializer for enumerable collections, but not dictionaries (lists, sets etc).</summary>
        </member>
        <member name="M:Eco.Core.Serialization.Serializers.EnumerableSerializer.AddRange(System.Object,System.Collections.IEnumerable)">
            <summary><c>AddRange</c> to <paramref name="enumerable"/>. It uses <see cref="F:Eco.Core.Serialization.Serializers.EnumerableSerializer.addRangeDelegate"/> if available otherwise it adds element one by one with <see cref="F:Eco.Core.Serialization.Serializers.EnumerableSerializer.addDelegate"/>.</summary>
        </member>
        <member name="M:Eco.Core.Serialization.Serializers.EnumerableSerializer.DecodeElements(System.IO.BinaryReader,System.Int32)">
            <summary>
            Decodes <paramref name="numElements"/> elements as <see cref="T:System.Collections.IEnumerable"/> from <paramref name="reader"/>. May be used with <see cref="F:Eco.Core.Serialization.Serializers.EnumerableSerializer.addRangeDelegate"/>.
            WARNING: If collection has custom <c>AddRange</c> then it should ensure to not have double enumeration. Ignoring this rule may lead to unpredictable results.
            </summary>
        </member>
        <member name="M:Eco.Core.Serialization.Serializers.EnumerableSerializer.CollectReferencedValues(Eco.Core.Serialization.DecodedObject[])">
            <summary>Collects referenced values for <paramref name="decodedObjects"/>. For every missing reference it will report error and skip it.</summary>
        </member>
        <member name="T:Eco.Core.Serialization.Serializers.EnumSkipperSerializer">
            <summary>Serializer skipping no more exising enums.</summary>
        </member>
        <member name="M:Eco.Core.Serialization.Serializers.EnumSkipperSerializer.Decode(System.IO.BinaryReader)">
            <summary>Return string instead of enum value. Usually this value ignored anyway, but string value may be useful for migrations.</summary>
        </member>
        <member name="T:Eco.Core.Serialization.Serializers.IArray2DSerializer">
            <summary>Interface for <see cref="T:Eco.Core.Serialization.Serializers.Array2DSerializer`1"/> which allows to access type info without known generic type.</summary>
        </member>
        <member name="P:Eco.Core.Serialization.Serializers.IReferenceableSerializer.ReferenceService">
            <summary>When not null then object may be encoded as reference (preferred if not SerializeFlags.ForceSerializeFullObject).</summary>
        </member>
        <member name="M:Eco.Core.Serialization.Serializers.ObjectSerializer.GetReferenceService(System.Type)">
            <summary>Get <see cref="P:Eco.Core.Serialization.Serializers.ObjectSerializer.ReferenceService"/> for <paramref name="type"/> based on implemented interfaces.</summary>
        </member>
        <member name="M:Eco.Core.Serialization.Serializers.ObjectSerializer.EncodeWith(Eco.Core.Serialization.Serializers.ISerializer,System.IO.BinaryWriter,System.Object,Eco.Core.Serialization.SerializeFlags)">
            <summary>
            This method may be used by inheritors and other classes from same module for more controlled serialization.
            </summary>
            <param name="serializer">Exact serializer to be used for instance encoding.</param>
            <param name="writer">binary writer.</param>
            <param name="instance">instance to be encoded.</param>
            <param name="flags"></param>
        </member>
        <member name="T:Eco.Core.Serialization.Serializers.ReferencedObjectSerializer">
            <summary>Class for referenced objects serialization. Usually used during migration to convert non standard reference to an object (i.e. string to User).</summary>
            <inheritdoc cref="T:Eco.Core.Serialization.Serializers.ObjectSerializer"/>
        </member>
        <member name="M:Eco.Core.Serialization.Serializers.ReferencedObjectSerializer.EncodeAsReference(System.IO.BinaryWriter,System.IO.BinaryReader)">
            <summary>Encodes key from <paramref name="keyReader"/> as a reference by the key to <paramref name="writer"/>. </summary>
        </member>
        <member name="T:Eco.Core.Serialization.Serializers.ReferencedObjectSerializer.Reference">
            <summary>Object reference with custom <see cref="F:Eco.Core.Serialization.Serializers.ReferencedObjectSerializer.referenceResolver"/> function.</summary>
        </member>
        <member name="T:Eco.Core.Serialization.Serializers.IValueSerializer">
            <summary>This interface helps to identify serializes which inherits from <see cref="T:Eco.Core.Serialization.Serializers.ValueSerializer`1"/> and get their <see cref="P:Eco.Core.Serialization.Serializers.IValueSerializer.ValueType"/>.</summary>
        </member>
        <member name="T:Eco.Core.Serialization.DecodedObject">
            <summary>
             Returned decoded object.  It can either be
             1. The fully formed object. Assigned in 'obj'
             2. A reference to the object, which will need to be assigned later, after all serialization is complete.
             In this case, object with the 'applyFunc' will be added fixupList to apply the reference, and that will
             be later executed.
             </summary>
        </member>
        <member name="M:Eco.Core.Serialization.DecodedObject.TryGetValue(System.Object@)">
            <summary>Tries to get <paramref name="value"/> as already known or resolved from reference.</summary>
        </member>
        <member name="M:Eco.Core.Serialization.DecodedObject.TryGetNotNullValue(System.Object@)">
            <summary>Tries to get non-null <paramref name="value"/> as already known or resolved from reference. Returns <c>false</c> if value isn't valid reference or it is <c>null</c>.</summary>
        </member>
        <member name="M:Eco.Core.Serialization.SimpleSerializer.TryGetReferenceService(System.Type,Eco.Core.Serialization.Internal.IObjectReferenceService@)">
            <summary>Returns <see cref="T:System.ComponentModel.Design.IReferenceService"/> for <paramref name="type"/> if exits.</summary>
        </member>
        <member name="M:Eco.Core.Serialization.SimpleSerializer.TryMakeReference(System.String,System.Int32,Eco.Core.Serialization.Internal.IObjectReference@)">
            <summary>Tries to make <see cref="T:Eco.Core.Serialization.Internal.IObjectReference"/> for <paramref name="typeName"/> and <paramref name="id"/>. Fails when id is 0 or typeName is null, non-existing type name or isn't referenceable.</summary>
        </member>
        <member name="M:Eco.Core.Serialization.SimpleSerializer.CreateClassSchemaSerializer(Eco.Core.Serialization.SimpleSerializer,Eco.Core.Serialization.SerializerSchema)">
            <summary>Creates <see cref="T:Eco.Core.Serialization.Serializers.ClassSerializer"/> for class schema type (class[className]).</summary>
        </member>
        <member name="M:Eco.Core.Serialization.SimpleSerializer.SerializeTo(System.IO.Stream,System.Object)">
            <summary> Serializes <paramref name="obj"/> to <paramref name="stream"/>. </summary>
        </member>
        <member name="M:Eco.Core.Serialization.SimpleSerializer.SerializeTo``1(System.IO.Stream,``0)">
            <summary> Serializes <paramref name="obj"/> to <paramref name="stream"/>. </summary>
        </member>
        <member name="T:Eco.Core.Serialization.StandardSerializers">
            <summary>
            Holder for standard serializers which used by different serialization systems (i.e. <see cref="T:Eco.Core.Serialization.Migrations.SchemaUtils"/> and <see cref="T:Eco.Core.Serialization.SimpleSerializer"/>).
            It may not be part of SimpleSerializer, because when accessed it will force static constructor initialization logic which will cause different problems in runtime (i.e. not all assemblies may be loaded and assembly scan won't find all serializable types).
            </summary>
        </member>
        <member name="M:Eco.Core.Serialization.StandardSerializers.CreateStandardSerializers">
            <summary>Creates array of standard serializers to be used by <see cref="T:Eco.Core.Serialization.SimpleSerializer"/> or <see cref="T:Eco.Core.Serialization.Migrations.SchemaUtils"/>. Can't use shared instance, because serializers not stateless and has ID assigned by <see cref="T:Eco.Core.Serialization.SimpleSerializer"/>.</summary>
        </member>
        <member name="M:Eco.Core.Serialization.StorageExtensions.Modify``1(``0,System.Action{``0})">
            <summary>Perform storage modification. It ensures it won't be modified or saved in another thread to prevent concurrency issues.</summary>
        </member>
        <member name="M:Eco.Core.Serialization.ZipBlob.GetAndEraseName">
            <inheritdoc cref="M:Eco.Core.Serialization.IPersistent.GetAndEraseName"/>
        </member>
        <member name="T:Eco.Core.Systems.GeneratedRegistrarWrapper`1">
            <summary>
            A generated registrar is one whose data is created entirely dynamically, but then stored as an ID.
            It wraps a regular registrar, allowing it to save references and get the usual registrar benefits (linking, etc)
            It functions by only saving names->IDs, and fixing up on load. This allows us to use regular reference serialization (ie, you
            can store references to Tags instead of some TagHandle class), as well as makes the storage of tags a direct reference when
            running, and simply an int ID otherwise.
            We make this a templated class so we have separate statics for each type that implements it (a trick to allow us to have serialization and
            static data in a single structure).
            </summary>
        </member>
        <member name="T:Eco.Core.Systems.IHasReferenceableSerializableID">
            <summary>Marker interface for objects with serializable universal ID which may be serialized by reference (like <see cref="T:Eco.Core.Systems.IHasID"/>). These objects by default serialized by reference and need to use <see cref="T:Eco.Shared.Serialization.ForceSerializeFullObjectAttribute"/> for full object serialization.</summary>
        </member>
        <member name="T:Eco.Core.Systems.IHasUniversalID">
            <summary>For any object that needs to be referenced by the client and/or server.</summary>
        </member>
        <member name="M:Eco.Core.Systems.IHasUniversalID.RPCCanSetProperty(Eco.Shared.Networking.INetClient,System.String)">
            <summary>Protects RPCs called on this UniversalID.
            This function may be implemented by any controller in case if it want to protect it's properties from unauthorized access. Used by ControllerManager.HandleViewRPC. <c>null</c> property for wildcard.</summary>
        </member>
        <member name="T:Eco.Core.Systems.IHasSerializableID">
            <summary>If an object needs to have its ID serialized, it must inherit from this instead.</summary>
        </member>
        <member name="T:Eco.Core.Systems.IRegistrar">
            <summary>Interface allowing to have untyped access to <see cref="T:Eco.Core.Systems.Registrar`1"/>.</summary>
        </member>
        <member name="M:Eco.Core.Systems.IRegistrar.OfType``1">
            <summary>Returns all entries in <see cref="T:Eco.Core.Systems.IRegistrar"/> of specified type <typeparamref name="TResult"/>.</summary>
        </member>
        <member name="M:Eco.Core.Systems.IRegistrar.All">
            <summary>Returns all entries in <see cref="T:Eco.Core.Systems.IRegistrar"/>.</summary>
        </member>
        <member name="M:Eco.Core.Systems.IRegistrar.Verify">
            <summary> Verifies all entities in the registry and removes all which fails the verification. </summary>
        </member>
        <member name="M:Eco.Core.Systems.IRegistrar.GetById(System.Int32)">
            <summary>Returns <see cref="T:Eco.Core.Systems.IRegistrar"/> entity by ID.</summary>
        </member>
        <member name="M:Eco.Core.Systems.IRegistrar.GetByName(System.String)">
            <summary>Returns <see cref="T:Eco.Core.Systems.IRegistrar"/> entity by Name.</summary>
        </member>
        <member name="M:Eco.Core.Systems.IRegistrar.Add(System.Type,Eco.Shared.Networking.INetObject,System.String)">
            <summary>Adds new entity of <paramref name="type"/> which should be derived from <see cref="P:Eco.Core.Systems.IRegistrar.ContainedType"/>. Optionally providing <paramref name="netObj"/> and <paramref name="name"/>.</summary>
        </member>
        <member name="M:Eco.Core.Systems.IRegistrar.Insert(Eco.Core.Systems.IHasID,Eco.Shared.Networking.INetObject)">
            <summary>Inserts pre-created <paramref name="obj"/>. It should match <see cref="P:Eco.Core.Systems.IRegistrar.ContainedType"/> of registar. Optionally providing <paramref name="netObj"/>.</summary>
        </member>
        <member name="M:Eco.Core.Systems.IRegistrar.Save">
            <summary>Marks registry as dirty and asks persistence system to save it.</summary>
        </member>
        <member name="T:Eco.Core.Systems.Registrar`1">
            <summary>A registrar stores things of a single type that are accessible via an ID or via a name.
            Types that are stored in a registrar must have a private constructor,
            only the registrar is allowed to construct them so that the ID stays assigned and tracked properly.</summary>
        </member>
        <member name="M:Eco.Core.Systems.Registrar`1.Verify">
            <summary> Verifies all entities in the registry and removes all which fails the verification. </summary>
        </member>
        <member name="M:Eco.Core.Systems.Registrar`1.EnsureId(`0)">
            <summary> Ensures <paramref name="obj"/> has ID (if ID == 0 then it allocates and assigns new ID). </summary>
        </member>
        <member name="M:Eco.Core.Systems.Registrars.Verify">
            <summary>Verifies all registrars. Should be called when all fixups already applied, makes low level verification and removes invalid entities.</summary>
        </member>
        <member name="M:Eco.Core.Systems.IHasID.Verify">
            <summary>Entity state verification function. Used by <see cref="T:Eco.Core.Systems.IRegistrar"/> to verify if entity's state isn't corrupted. All corrupted entities will be removed from registry. Called when serialization finished (fixups applied and PostLoad methods invoked).</summary>
        </member>
        <member name="M:Eco.Core.Systems.IHasID.GetLinkableName">
            <summary>Return a name that can be used for forming a link, e.g. used in ObjectFinders.cs. Some objects require a specific string to be parsed as a link, e.g. Channels.</summary>
        </member>
        <member name="T:Eco.Core.Systems.UniversalIDs">
            <summary>Management of objects with a universal id. Tracks them and allows finding by ID.</summary>
        </member>
        <member name="M:Eco.Core.Systems.UniversalIDs.Init">
            <summary>Subscribe to serialization completion, so we can setup the next id after all existing ones are loaded, and ensure
            all ID'd objects are stored in our dictionary.</summary>
        </member>
        <member name="M:Eco.Core.Systems.UniversalIDs.Load(System.Collections.Generic.IEnumerable{Eco.Core.Systems.IHasUniversalID})">
            <summary>Loads objects to <see cref="T:Eco.Core.Systems.UniversalIDs"/> storage.</summary>
        </member>
        <member name="M:Eco.Core.Systems.UniversalIDs.Unload">
            <summary>Unloads objects from <see cref="T:Eco.Core.Systems.UniversalIDs"/> storage. May be used in tests.</summary>
        </member>
        <member name="M:Eco.Core.Systems.UniversalIDs.Clean">
            <summary>Remove entries whose weak-references no longer point to anything.</summary>
        </member>
        <member name="M:Eco.Core.Systems.UniversalIDs.TryGetByID(System.Int32,Eco.Core.Systems.IHasUniversalID@)">
            <summary>Get the object of the given ID. It may fail if the weak reference has expired on a deleted object,
            in which case false is returned.</summary>
        </member>
        <member name="M:Eco.Core.Systems.UniversalIDs.GetOrNull(System.Int32)">
            <summary>Return the objects with the given ID, or null if it's not found.</summary>
        </member>
        <member name="M:Eco.Core.Systems.UniversalIDs.GetOrCreateID(Eco.Core.Systems.IHasUniversalID)">
            <summary> Get the ID, assigning a new one if none is set yet.</summary>
        </member>
        <member name="M:Eco.Core.Systems.UniversalIDs.InternalCreateID(Eco.Core.Systems.IHasUniversalID)">
            <summary>Assign an ID and put it in the dictionary</summary>
        </member>
        <member name="M:Eco.Core.Systems.UniversalIDs.AddToDictionary(Eco.Core.Systems.IHasUniversalID)">
            <summary>Put an object with an id into the dictionary, asserting no collisions.</summary>
        </member>
        <member name="T:Eco.Shared.Collections.ImmutableDictionaryTransaction`2">
            <summary>
            It is a class for transaction for <see cref="T:System.Collections.Immutable.ImmutableDictionary`2"/>. It isn't immutable by itself. It is also not thread-safe and can be used from one thread.
            It provides more effective way to make multiple modifications for <see cref="T:System.Collections.Immutable.ImmutableDictionary`2"/> in transaction with tracking for all changes.
            It behaves dictionary-like and implements most common dictionary methods.
            You should use this class if you want to make multiple modifications to <see cref="T:Eco.Core.Utils.ThreadSafeDictionary`2"/>, but don't wanna to make them visible
            until all of them completed. You should ensure no other modifications done in <see cref="T:Eco.Core.Utils.ThreadSafeDictionary`2"/> until transaction complete, because they may be overwritten.
            Then you can create/re-use <see cref="T:Eco.Shared.Collections.ImmutableDictionaryTransaction`2"/> and <see cref="M:Eco.Shared.Collections.ImmutableDictionaryTransaction`2.Start(System.Collections.Immutable.ImmutableDictionary{`0,`1})"/> it for <see cref="P:Eco.Core.Utils.ThreadSafeDictionary`2.Snapshot"/>.
            When you done you can <see cref="M:Eco.Shared.Collections.ImmutableDictionaryTransaction`2.Commit"/> it and get new <see cref="T:System.Collections.Immutable.ImmutableDictionary`2"/> with all modifications applied and then <see cref="M:Eco.Core.Utils.ThreadSafeDictionary`2.Set(System.Collections.Immutable.ImmutableDictionary{`0,`1})"/> it back.
            It may be extended if required to expose all modifications done in transaction for processing.
            </summary>
        </member>
        <member name="M:Eco.Shared.Collections.ImmutableDictionaryTransaction`2.Start(System.Collections.Immutable.ImmutableDictionary{`0,`1})">
            <summary>Starts new transaction for <paramref name="initial"/>. Be sure you <see cref="M:Eco.Shared.Collections.ImmutableDictionaryTransaction`2.Commit"/> previous transaction, before this call, because state may not be clear!</summary>
        </member>
        <member name="M:Eco.Shared.Collections.ImmutableDictionaryTransaction`2.Commit">
            <summary>Finishes transaction, clears transaction state and returns new <see cref="T:System.Collections.Immutable.ImmutableDictionary`2"/> with all transaction changes applied.</summary>
        </member>
        <member name="M:Eco.Shared.Utils.ChangeNotificationUtils.PropagateChange(Eco.Core.Controller.IController,System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>Glue coded to connect a fody automatic change notification (which happens through the INotifyPropertyChanged interface) to a separate controller./// </summary>
        </member>
    </members>
</doc>
